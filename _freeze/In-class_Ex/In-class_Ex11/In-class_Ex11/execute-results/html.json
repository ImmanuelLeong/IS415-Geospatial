{
  "hash": "1f10828531242d9a32d4531c1234bdc0",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"In-Class Exercise 11\"\nauthor: \"Immanuel Leong\"\ndate: \"November 4, 2024\"\ndate-modified: \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n  warning: false\n  freeze: true\n---\n\n\n\n### Loading the R package\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(tidyverse, sf, tmap, httr, performance)\n```\n:::\n\n\n\n### Importing data\n\nThe code chunk below imports multiple csv files in a specified folder and appends them into a single tibble data frame.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfolder_path <- \"data/aspatial\"\n\nfile_list <- list.files(path = folder_path,\n                        pattern = \"^realis.*\\\\.csv$\",\n                        full.names = TRUE)\n\nrealis_data <- file_list %>%\n  map_dfr(read_csv)\n```\n:::\n\n\n\n### Wrangling data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncondo_resale <- realis_data %>%\n  mutate(`Sale Date` = dmy(`Sale Date`)) %>%\n  filter(`Type of Sale` == \"Resale\" &\n           `Property Type` == \"Condominium\")\n```\n:::\n\n\n\n### Geocoding\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npostcode <- unique(condo_resale$`Postal Code`)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nurl <- \"https://onemap.gov.sg/api/common/elastic/search\"\n\nfound <- data.frame()\n\nnot_found <- data.frame()\n\nfor (postcode in postcode) {\n  \n  query <- list('searchVal' = postcode, 'returnGeom' = 'Y',\n                'getAddrDetails' = 'Y', 'pageNum' = '1')\n\n  res <- GET(url, query = query)\n  \n  if (content(res)$found != 0) {\n    found <- rbind(found, data.frame(content(res))[4:13])\n  }\n  else {not_found = data.frame(postcode)}\n}\n```\n:::\n\n\n\n### Tidying field names\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfound <- found %>%\n  select(c(6:8)) %>%\n  rename(POSTAL = `results.POSTAL`,\n         XCOORD = `results.X`,\n         YCOORD = `results.Y`)\n```\n:::\n\n\n\n### Joining tables\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncondo_resale_geocoded = left_join(\n  condo_resale, found,\n  by = c('Postal Code' = 'POSTAL'))\n```\n:::\n\n\n\n### Converting to sf\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncondo_resale_sf <- st_as_sf(condo_resale_geocoded,\n                            coords = c(\"XCOORD\", \"YCOORD\"),\n                            crs = 3414)\n```\n:::\n\n\n\n### Cleaning Spatial Data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Checking for ovrlapping point features\n\noverlapping_points <- condo_resale_sf %>%\n  mutate(overlap = lengths(st_equals(., .)) > 1)\n\noverlapping_points\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 5991 features and 22 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 14973.78 ymin: 24730.35 xmax: 43287.74 ymax: 48670.84\nProjected CRS: SVY21 / Singapore TM\n# A tibble: 5,991 × 23\n   `Project Name`      `Transacted Price ($)` `Area (SQFT)` `Unit Price ($ PSF)`\n * <chr>                                <dbl>         <dbl>                <dbl>\n 1 CASA ROSA                          1500000         1367.                 1097\n 2 THE MINTON                         1840000         1216.                 1513\n 3 NV RESIDENCES                      1350000         1109.                 1218\n 4 SANT RITZ                           890000          527.                 1687\n 5 ECO                                1620000          990.                 1636\n 6 MARINA BAY RESIDEN…                1420000          710.                 1999\n 7 THE GARDENS AT BIS…                1800000         1206.                 1493\n 8 THOMSON 800                        2800000         1625.                 1723\n 9 SELETAR PARK RESID…                1490000         1507.                  989\n10 THE ESTUARY                        1540000         1195.                 1289\n# ℹ 5,981 more rows\n# ℹ 19 more variables: `Sale Date` <date>, Address <chr>, `Type of Sale` <chr>,\n#   `Type of Area` <chr>, `Area (SQM)` <dbl>, `Unit Price ($ PSM)` <dbl>,\n#   `Nett Price($)` <chr>, `Property Type` <chr>, `Number of Units` <dbl>,\n#   Tenure <chr>, `Completion Date` <chr>, `Purchaser Address Indicator` <chr>,\n#   `Postal Code` <chr>, `Postal District` <chr>, `Postal Sector` <chr>,\n#   `Planning Region` <chr>, `Planning Area` <chr>, geometry <POINT [m]>, …\n```\n\n\n:::\n:::\n\n\n\nIn the code chunk below, st_jitter() of sf package is used to move the point features by 5m to avoid overlapping point features\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncondo_resale_sf <- condo_resale_sf %>%\n  st_jitter(amount = 2)\n```\n:::\n\n\n\n### Revisiting Take-Home Exercise 2\n\nTo avoid centroids being affected by outlying islands, we must do the following\n\nSplit the multipolygons into individual polygons using st_cast()\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsf_polygon <- prov_sf %>%\n  st_cast(\"POLYGON\") %>%\n  mutate(area = st_area(.))\n```\n:::\n\n\n\n-   Group provinces by their unique name\n\n-   Select the largest polygon by area\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprov_cleaned <- sf_polygon %>%\n  group_by(ADM1_EN) %>%\n  filter(area == max(area)) %>%\n  ungroup() %>%\n  select(-area) %>%\n  select(ADM1_EN)\n```\n:::\n\n\n\n-   Ensure that ADM1_EN values are consistent between the two tables that you want to join\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndrug_cleaned <- drug %>%\n  mutate(AMD1_EN = case_when(\n    ADM1_EN == \"buogkan\" ~ \"Bueng Kan\",\n    ADM1_EN == \"Loburi\" ~ \"Lop Buri\",\n    TRUE ~ ADM1_EN\n  ))\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}