{
  "hash": "c0aa3319a728e2214f6e37086c45a2c9",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"In-Class Exercise 12\"\nauthor: \"Immanuel Leong\"\ndate: \"November 11, 2024\"\ndate-modified: \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n  warning: false\n  freeze: true\n---\n\n\n\n### Getting started\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, spdep, GWmodel, SpatialML, tmap, rsample, yardstick, tidyverse, knitr, kableExtra, spatialRF)\n```\n:::\n\n\n\n### Preparing data\n\n#### Data import\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmdata <- read_rds(\"data/rds/mdata.rds\")\n```\n:::\n\n\n\n#### Data sampling\n\nCalibrating predictive models is computationally intensive, especially when random forest method is used. For quick prototyping, a 10% sample will be selected at random from the data by using the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\n\nHDB_sample <- mdata %>%\n  sample_n(1500)\n```\n:::\n\n\n\n#### Checking for overlapping points\n\nThe code chunk below is used to check if there are overlapping point features.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\noverlapping_points <- HDB_sample %>%\n  mutate(overlap = lengths(st_equals(., .)) > 1)\n\nsummary(overlapping_points$overlap)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Mode   FALSE    TRUE \nlogical    1047     453 \n```\n\n\n:::\n:::\n\n\n\n#### Spatial jitter\n\nIn the code chunk below, st_jitter() of sf is used to move the point features by 5m to avoid overlapping point features.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nHDB_sample <- HDB_sample %>%\n  st_jitter(amount = 5)\n```\n:::\n\n\n\n### Data sampling\n\nThe entire data are split into training and test data sets with 65% and 35% respectively using initial_split of rsample.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\n\nresale_split <- initial_split(HDB_sample, prop = 6.67/10)\n\ntrain_data <- training(resale_split)\ntest_data <- testing(resale_split)\n```\n:::\n\n\n\nIt is always good practice to save the training and test data sets for subsequent use.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(train_data, \"data/rds/train_data.rds\")\nwrite_rds(test_data, \"data/rds/test_data.rds\")\n```\n:::\n\n\n\n### Multicollinearity check\n\nIn order to avoid multicollinearity, in the code chunk below, ggcorrmat() of ggstatsplot is used to plot a correlation matrix to check if there are pairs of highly correlated independent variables.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmdata_nogeo <- mdata %>%\n  st_drop_geometry()\n\nggstatsplot::ggcorrmat(mdata_nogeo[, 2:17])\n```\n\n::: {.cell-output-display}\n![](In-class_Ex12_files/figure-html/unnamed-chunk-8-1.png){width=1440}\n:::\n:::\n\n\n\n### Building non-spatial multiple linear regression\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprice_mlr <- lm(resale_price ~ floor_area_sqm +\n                  storey_order + remaining_lease_mths +\n                  PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +\n                  PROX_MRT + PROX_PARK + PROX_MALL + \n                  PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n                  WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\n                  WITHIN_1KM_PRISCH,\n                data = train_data)\n\nsummary(price_mlr)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = resale_price ~ floor_area_sqm + storey_order + remaining_lease_mths + \n    PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER + PROX_MRT + PROX_PARK + \n    PROX_MALL + PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN + \n    WITHIN_350M_CHILDCARE + WITHIN_350M_BUS + WITHIN_1KM_PRISCH, \n    data = train_data)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-167624  -37265    -415   34811  224601 \n\nCoefficients:\n                         Estimate Std. Error t value Pr(>|t|)    \n(Intercept)              115703.7    34303.4   3.373 0.000773 ***\nfloor_area_sqm             2778.6      292.3   9.507  < 2e-16 ***\nstorey_order              12698.2     1071.0  11.857  < 2e-16 ***\nremaining_lease_mths        350.2       14.6  23.997  < 2e-16 ***\nPROX_CBD                 -16225.6      630.1 -25.751  < 2e-16 ***\nPROX_ELDERLYCARE         -11330.9     3220.8  -3.518 0.000455 ***\nPROX_HAWKER              -19964.1     4021.1  -4.965 8.10e-07 ***\nPROX_MRT                 -39652.5     5412.3  -7.326 4.92e-13 ***\nPROX_PARK                -15878.3     4609.2  -3.445 0.000595 ***\nPROX_MALL                -15910.9     6438.1  -2.471 0.013628 *  \nPROX_SUPERMARKET         -18928.5    13305.0  -1.423 0.155150    \nWITHIN_350M_KINDERGARTEN   9309.7     2024.3   4.599 4.80e-06 ***\nWITHIN_350M_CHILDCARE     -1619.5     1181.0  -1.371 0.170572    \nWITHIN_350M_BUS            -447.7      738.7  -0.606 0.544624    \nWITHIN_1KM_PRISCH        -10698.0     1543.5  -6.931 7.55e-12 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 61270 on 985 degrees of freedom\nMultiple R-squared:  0.7424,\tAdjusted R-squared:  0.7387 \nF-statistic: 202.7 on 14 and 985 DF,  p-value: < 2.2e-16\n```\n\n\n:::\n:::\n\n\n\n### Predictive Modelling with gwr\n\n#### Computing bw\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwr_bw_train_ad <- bw.gwr(resale_price ~ floor_area_sqm +\n                  storey_order + remaining_lease_mths +\n                  PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +\n                  PROX_MRT + PROX_PARK + PROX_MALL + \n                  PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n                  WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\n                  WITHIN_1KM_PRISCH,\n                data = train_data,\n                approach = \"CV\",\n                kernel = \"gaussian\",\n                adaptive = TRUE,\n                longlat = FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nAdaptive bandwidth: 625 CV score: 3.459032e+12 \nAdaptive bandwidth: 394 CV score: 3.231786e+12 \nAdaptive bandwidth: 250 CV score: 2.914736e+12 \nAdaptive bandwidth: 162 CV score: 2.610897e+12 \nAdaptive bandwidth: 107 CV score: 2.240188e+12 \nAdaptive bandwidth: 73 CV score: 1.971641e+12 \nAdaptive bandwidth: 52 CV score: 1.797271e+12 \nAdaptive bandwidth: 39 CV score: 1.659472e+12 \nAdaptive bandwidth: 31 CV score: 1.573963e+12 \nAdaptive bandwidth: 26 CV score: 1.550147e+12 \nAdaptive bandwidth: 23 CV score: 1.542544e+12 \nAdaptive bandwidth: 21 CV score: 1.518885e+12 \nAdaptive bandwidth: 19 CV score: 1.515965e+12 \nAdaptive bandwidth: 19 CV score: 1.515965e+12 \n```\n\n\n:::\n\n```{.r .cell-code}\ngwr_bw_train_ad\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 19\n```\n\n\n:::\n:::\n\n\n\n#### Model calibration\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwr_ad <- gwr.basic(formula = resale_price ~ floor_area_sqm +\n                  storey_order + remaining_lease_mths +\n                  PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +\n                  PROX_MRT + PROX_PARK + PROX_MALL + \n                  PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n                  WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\n                  WITHIN_1KM_PRISCH,\n                data = train_data,\n                bw = 20,\n                kernel = \"gaussian\",\n                adaptive = TRUE,\n                longlat = FALSE)\n\ngwr_ad\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   ***********************************************************************\n   *                       Package   GWmodel                             *\n   ***********************************************************************\n   Program starts at: 2024-11-11 11:18:08.908329 \n   Call:\n   gwr.basic(formula = resale_price ~ floor_area_sqm + storey_order + \n    remaining_lease_mths + PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER + \n    PROX_MRT + PROX_PARK + PROX_MALL + PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN + \n    WITHIN_350M_CHILDCARE + WITHIN_350M_BUS + WITHIN_1KM_PRISCH, \n    data = train_data, bw = 20, kernel = \"gaussian\", adaptive = TRUE, \n    longlat = FALSE)\n\n   Dependent (y) variable:  resale_price\n   Independent variables:  floor_area_sqm storey_order remaining_lease_mths PROX_CBD PROX_ELDERLYCARE PROX_HAWKER PROX_MRT PROX_PARK PROX_MALL PROX_SUPERMARKET WITHIN_350M_KINDERGARTEN WITHIN_350M_CHILDCARE WITHIN_350M_BUS WITHIN_1KM_PRISCH\n   Number of data points: 1000\n   ***********************************************************************\n   *                    Results of Global Regression                     *\n   ***********************************************************************\n\n   Call:\n    lm(formula = formula, data = data)\n\n   Residuals:\n    Min      1Q  Median      3Q     Max \n-167624  -37265    -415   34811  224601 \n\n   Coefficients:\n                            Estimate Std. Error t value Pr(>|t|)    \n   (Intercept)              115703.7    34303.4   3.373 0.000773 ***\n   floor_area_sqm             2778.6      292.3   9.507  < 2e-16 ***\n   storey_order              12698.2     1071.0  11.857  < 2e-16 ***\n   remaining_lease_mths        350.2       14.6  23.997  < 2e-16 ***\n   PROX_CBD                 -16225.6      630.1 -25.751  < 2e-16 ***\n   PROX_ELDERLYCARE         -11330.9     3220.8  -3.518 0.000455 ***\n   PROX_HAWKER              -19964.1     4021.1  -4.965 8.10e-07 ***\n   PROX_MRT                 -39652.5     5412.3  -7.326 4.92e-13 ***\n   PROX_PARK                -15878.3     4609.2  -3.445 0.000595 ***\n   PROX_MALL                -15910.9     6438.1  -2.471 0.013628 *  \n   PROX_SUPERMARKET         -18928.5    13305.0  -1.423 0.155150    \n   WITHIN_350M_KINDERGARTEN   9309.7     2024.3   4.599 4.80e-06 ***\n   WITHIN_350M_CHILDCARE     -1619.5     1181.0  -1.371 0.170572    \n   WITHIN_350M_BUS            -447.7      738.7  -0.606 0.544624    \n   WITHIN_1KM_PRISCH        -10698.0     1543.5  -6.931 7.55e-12 ***\n\n   ---Significance stars\n   Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 \n   Residual standard error: 61270 on 985 degrees of freedom\n   Multiple R-squared: 0.7424\n   Adjusted R-squared: 0.7387 \n   F-statistic: 202.7 on 14 and 985 DF,  p-value: < 2.2e-16 \n   ***Extra Diagnostic information\n   Residual sum of squares: 3.698259e+12\n   Sigma(hat): 60874.22\n   AIC:  24901.01\n   AICc:  24901.56\n   BIC:  24090.05\n   ***********************************************************************\n   *          Results of Geographically Weighted Regression              *\n   ***********************************************************************\n\n   *********************Model calibration information*********************\n   Kernel function: gaussian \n   Adaptive bandwidth: 20 (number of nearest neighbours)\n   Regression points: the same locations as observations are used.\n   Distance metric: Euclidean distance metric is used.\n\n   ****************Summary of GWR coefficient estimates:******************\n                                   Min.     1st Qu.      Median     3rd Qu.\n   Intercept                -1663062.62  -204915.89    21043.25   251357.72\n   floor_area_sqm              -2193.66     1268.11     2051.64     3326.94\n   storey_order                 3367.31     8114.04    10358.35    13742.75\n   remaining_lease_mths         -499.92      344.73      423.01      500.86\n   PROX_CBD                   -97523.35   -23153.66   -10733.11    -1318.50\n   PROX_ELDERLYCARE          -256481.72   -25259.97    -5758.02    17495.07\n   PROX_HAWKER               -214127.62   -35792.85   -10937.48    20129.69\n   PROX_MRT                  -295651.58   -92742.73   -54888.07   -20600.71\n   PROX_PARK                 -217869.81   -33139.58   -16436.09     8419.09\n   PROX_MALL                 -254466.70   -34745.35     6084.76    47080.08\n   PROX_SUPERMARKET          -174391.60   -42069.69    -6523.34    30961.08\n   WITHIN_350M_KINDERGARTEN   -41599.70    -8649.22    -2510.79     5292.89\n   WITHIN_350M_CHILDCARE      -14416.73    -2204.59     1410.06     3547.54\n   WITHIN_350M_BUS            -10051.44    -1734.16      502.41     2237.92\n   WITHIN_1KM_PRISCH          -50136.88    -3847.26      363.29     4874.47\n                                  Max.\n   Intercept                1369290.31\n   floor_area_sqm              7807.37\n   storey_order               26779.38\n   remaining_lease_mths         722.65\n   PROX_CBD                  115887.06\n   PROX_ELDERLYCARE          178891.48\n   PROX_HAWKER               133913.30\n   PROX_MRT                  117015.21\n   PROX_PARK                  88564.14\n   PROX_MALL                 320250.75\n   PROX_SUPERMARKET          170670.88\n   WITHIN_350M_KINDERGARTEN   40700.58\n   WITHIN_350M_CHILDCARE      15725.26\n   WITHIN_350M_BUS            11729.78\n   WITHIN_1KM_PRISCH          30465.58\n   ************************Diagnostic information*************************\n   Number of data points: 1000 \n   Effective number of parameters (2trace(S) - trace(S'S)): 403.5455 \n   Effective degrees of freedom (n-2trace(S) + trace(S'S)): 596.4545 \n   AICc (GWR book, Fotheringham, et al. 2002, p. 61, eq 2.33): 24082.06 \n   AIC (GWR book, Fotheringham, et al. 2002,GWR p. 96, eq. 4.22): 23420.25 \n   BIC (GWR book, Fotheringham, et al. 2002,GWR p. 61, eq. 2.34): 24371.15 \n   Residual sum of squares: 624302459770 \n   R-square value:  0.9565108 \n   Adjusted R-square value:  0.9270377 \n\n   ***********************************************************************\n   Program stops at: 2024-11-11 11:18:10.195897 \n```\n\n\n:::\n:::\n\n\n\n#### Predicting with test data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwr_pred <- gwr.predict(formula = resale_price ~ floor_area_sqm +\n                  storey_order + remaining_lease_mths +\n                  PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +\n                  PROX_MRT + PROX_PARK + PROX_MALL + \n                  PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n                  WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\n                  WITHIN_1KM_PRISCH,\n                data = train_data,\n                predictdata = test_data,\n                bw = 20,\n                kernel = \"gaussian\",\n                adaptive = TRUE,\n                longlat = FALSE)\n```\n:::\n\n\n\n#### Saving predicted values\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwr_pred_df <- as.data.frame(gwr_pred$SDF$prediction) %>%\n  rename(gwr_pred = \"gwr_pred$SDF$prediction\")\n```\n:::\n\n\n\n### Predictive Modelling with RF method\n\n#### Data preparation\n\nFirstly, code chunk below is used to extract coordinates of training and test data sets\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncoords <- st_coordinates(HDB_sample)\ncoords_train <- st_coordinates(train_data)\ncoords_test <- st_coordinates(test_data)\n```\n:::\n\n\n\nNext, code chunk below is used to drop the geometry column of the training dataset.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrain_data_nogeom <- train_data %>%\n  st_drop_geometry()\n```\n:::\n\n\n\n#### Calibrating RF model\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\n\nrf <- ranger(resale_price ~ floor_area_sqm +\n                  storey_order + remaining_lease_mths +\n                  PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +\n                  PROX_MRT + PROX_PARK + PROX_MALL + \n                  PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n                  WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\n                  WITHIN_1KM_PRISCH,\n                data = train_data_nogeom)\n```\n:::\n\n\n\n#### Model output\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrf\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRanger result\n\nCall:\n ranger(resale_price ~ floor_area_sqm + storey_order + remaining_lease_mths +      PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER + PROX_MRT + PROX_PARK +      PROX_MALL + PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +      WITHIN_350M_CHILDCARE + WITHIN_350M_BUS + WITHIN_1KM_PRISCH,      data = train_data_nogeom) \n\nType:                             Regression \nNumber of trees:                  500 \nSample size:                      1000 \nNumber of independent variables:  14 \nMtry:                             3 \nTarget node size:                 5 \nVariable importance mode:         none \nSplitrule:                        variance \nOOB prediction error (MSE):       2289284270 \nR squared (OOB):                  0.8406868 \n```\n\n\n:::\n:::\n\n\n\n#### Preparing test data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_data_nogeom <- cbind(test_data, coords_test) %>%\n  st_drop_geometry()\n```\n:::\n\n\n\n#### Predicting with rf\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrf_pred <- predict(rf, data = test_data_nogeom)\n```\n:::\n\n\n\n#### Saving the predicted values\n\nThe output of predict() is an object of class ranger with elements. Code chunk below is used to extract values from predictions of predicted class and save the values in a data frame.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrf_pred_df <- as.data.frame(rf_pred$predictions) %>%\n  rename(rf_pred = \"rf_pred$predictions\")\n```\n:::\n\n\n\n### Predictive Modelling with SpatialML\n\n#### Calibrating with grf\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\n\ngrf_ad <- grf(formula = resale_price ~ floor_area_sqm +\n                  storey_order + remaining_lease_mths +\n                  PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +\n                  PROX_MRT + PROX_PARK + PROX_MALL + \n                  PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n                  WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\n                  WITHIN_1KM_PRISCH,\n              dframe = train_data_nogeom,\n              bw = 20,\n              kernel = \"adaptive\",\n              coords = coords_train)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRanger result\n\nCall:\n ranger(resale_price ~ floor_area_sqm + storey_order + remaining_lease_mths +      PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER + PROX_MRT + PROX_PARK +      PROX_MALL + PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +      WITHIN_350M_CHILDCARE + WITHIN_350M_BUS + WITHIN_1KM_PRISCH,      data = train_data_nogeom, num.trees = 500, mtry = 4, importance = \"impurity\",      num.threads = NULL) \n\nType:                             Regression \nNumber of trees:                  500 \nSample size:                      1000 \nNumber of independent variables:  14 \nMtry:                             4 \nTarget node size:                 5 \nVariable importance mode:         impurity \nSplitrule:                        variance \nOOB prediction error (MSE):       2056587170 \nR squared (OOB):                  0.8568804 \n          floor_area_sqm             storey_order     remaining_lease_mths \n            6.932661e+11             1.471090e+12             2.512971e+12 \n                PROX_CBD         PROX_ELDERLYCARE              PROX_HAWKER \n            4.695331e+12             5.430899e+11             6.061641e+11 \n                PROX_MRT                PROX_PARK                PROX_MALL \n            8.355142e+11             5.612980e+11             4.449032e+11 \n        PROX_SUPERMARKET WITHIN_350M_KINDERGARTEN    WITHIN_350M_CHILDCARE \n            3.698543e+11             1.287529e+11             2.290324e+11 \n         WITHIN_350M_BUS        WITHIN_1KM_PRISCH \n            2.310307e+11             7.644464e+11 \n     Min.   1st Qu.    Median      Mean   3rd Qu.      Max. \n-290000.0  -23542.0     301.7   -1419.2   20628.4  275662.5 \n     Min.   1st Qu.    Median      Mean   3rd Qu.      Max. \n-39811.32  -2890.27      0.25     41.71   2914.50  45363.69 \n                               Min          Max        Mean         StD\nfloor_area_sqm                   0  93554808148  6579446660 12070756152\nstorey_order              40825679 175066741478  6798143080 17439613620\nremaining_lease_mths     147176404 132323223994 17003264291 27856556164\nPROX_CBD                  98672979  86998930774  7795275977 12420258631\nPROX_ELDERLYCARE         136038143  60602086147  6363805690  9972185105\nPROX_HAWKER               89375590  76470252974  5959960036 10069973920\nPROX_MRT                 141134469 116981909991  7311127365 14402287905\nPROX_PARK                173527329  91563243055  6282954230 12004019497\nPROX_MALL                136045951 111744007681  8082912771 14856365039\nPROX_SUPERMARKET         117381309  67560243432  5118831575  8420630833\nWITHIN_350M_KINDERGARTEN         0  43638703821  1704409355  3939462279\nWITHIN_350M_CHILDCARE     24644933 114970847915  4291790153 10498357427\nWITHIN_350M_BUS           45643896  81035956654  3244648284  6333435620\nWITHIN_1KM_PRISCH                0  29773426249  1919719438  3594705849\n```\n\n\n:::\n:::\n\n\n\n#### Preparing test data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_data_nogeom <- cbind(test_data, coords_test) %>%\n  st_drop_geometry()\n```\n:::\n\n\n\n#### Predicting with the test data\n\nIn the code chunk below, use predict.grf() of spatialML for predicting resale prices in the rest data set.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrf_pred <- predict.grf(grf_ad,\n                        test_data_nogeom,\n                        x.var.name = \"X\",\n                        y.var.name = \"Y\",\n                        local.w = 1,\n                        global.w = 0)\n```\n:::\n\n\n\n#### Saving the predicted values\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrf_pred_df <- as.data.frame(grf_pred)\n```\n:::\n\n\n\n### Model comparison\n\n#### Combining models' output\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_data_pred <- test_data %>%\n  select(resale_price) %>%\n  cbind(gwr_pred_df) %>%\n  cbind(rf_pred_df) %>%\n  cbind(grf_pred_df)\n```\n:::\n\n\n\n#### Transposing data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_longer <- test_data_pred %>%\n  st_drop_geometry() %>%\n  pivot_longer(cols = ends_with(\"pred\"),\n               names_to = \"model\",\n               values_to = \"predicted\")\n```\n:::\n\n\n\n#### Renaming\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel_labels <- c(\n  gwr_pred = \"gwr\",\n  rf_pred = \"Random Forest\",\n  grf_pred = \"gwRF\")\n\ntest_longer <- test_longer %>%\n  mutate(model = recode(\n    model, !!!model_labels))\n```\n:::\n\n\n\n#### Computing rmse\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrmse_results <- test_longer %>%\n  group_by(model) %>%\n  rmse(truth = resale_price,\n       estimate = predicted) %>%\n  rename(rmse = .estimate) %>%\n  select(model, rmse)\n```\n:::\n\n\n\n### Model comparison plots\n\nBar chart\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(rmse_results,\n       aes(x = reorder(model, rmse),\n           y = rmse,\n           fill = \"skyblue\")) +\n  geom_bar(stat = \"identity\",\n           fill = \"skyblue\",\n           color = \"black\",\n           width = 0.7) +\n  labs(title = \"MSE Comparison of Models\",\n       y = \"RMSE\",\n       x = \"Model\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](In-class_Ex12_files/figure-html/unnamed-chunk-29-1.png){width=672}\n:::\n:::\n\n\n\nScatter plots\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_longer <- test_longer %>%\n  left_join(rmse_results,\n            by = \"model\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = test_longer,\n       aes(x = predicted,\n           y = resale_price)) +\n  facet_wrap(~ model) +\n  geom_point() +\n  geom_text(data = test_longer,\n            aes(x = Inf, y = Inf,\n                label = paste(\"RMSE:\", round(rmse, 2))),\n            hjust = 1.1, vjust = 1.1,\n            color = \"black\", size = 4)\n```\n\n::: {.cell-output-display}\n![](In-class_Ex12_files/figure-html/unnamed-chunk-31-1.png){width=672}\n:::\n:::\n\n\n\n### Variable importance\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvar_imp <- data.frame(\n  Variable = names(grf_ad$Global.Model$variable.importance),\n  Importance = grf_ad$Global.Model$variable.importance\n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(var_imp, aes(x = reorder(Variable, Importance),\n                    y = Importance)) +\n  geom_bar(stat = \"identity\",\n           fill = \"skyblue\") +\n  coord_flip() +\n  labs(\n    title = \"Variable Importance from Ranger Model\",\n    x = \"Variables\",\n    y = \"Importance\"\n  ) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](In-class_Ex12_files/figure-html/unnamed-chunk-33-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "In-class_Ex12_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}