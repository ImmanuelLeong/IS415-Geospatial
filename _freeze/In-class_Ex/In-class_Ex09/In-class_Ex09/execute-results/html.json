{
  "hash": "0e1135774fc11d302cd6ce6587838ddb",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"In-Class Exercise 9\"\nauthor: \"Immanuel Leong\"\ndate: \"October 21, 2024\"\ndate-modified: \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n  warning: false\n  freeze: true\n---\n\n\n\n### Loading R packages\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(spdep, sp, tmap, sf, ClustGeo, cluster, factoextra, NbClust, tidyverse, GGally)\n```\n:::\n\n\n\n### Importing the data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nshan_sf <- read_rds(\"data/rds/shan_sf.rds\")\n\nshan_ict <- read_rds(\"data/rds/shan_ict.rds\")\n```\n:::\n\n\n\n### Conventional Hierarchical Clustering\n\n#### Hierarchical clustering\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nproxmat <- dist(shan_ict, method = \"euclidean\") \n\n# can select which clustering variables to use, have to change first argument accordingly\n\nhclust_ward <- hclust(proxmat, method = \"ward.D\")\n\n# hclust_ward is a hierarchical cluster object (only then can argument k be used in cutree)\n\ngroups <- as.factor(cutree(hclust_ward, k = 6))\n```\n:::\n\n\n\n#### Append to the geospatial data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nshan_sf_cluster <- cbind(shan_sf, as.matrix(groups)) %>%\n  rename(`CLUSTER` = `as.matrix.groups.`) %>%\n  select(-c(3:4, 7:9)) %>%\n  rename(TS = TS.x)\n```\n:::\n\n\n\n#### Dendrogram\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(hclust_ward, cex = 0.6)\n\nrect.hclust(hclust_ward, k = 6, border = 2:5)\n```\n\n::: {.cell-output-display}\n![](In-class_Ex09_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\n#### Cluster map\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nqtm(shan_sf_cluster, \"CLUSTER\")\n```\n\n::: {.cell-output-display}\n![](In-class_Ex09_files/figure-html/unnamed-chunk-6-1.png){width=1152}\n:::\n\n```{.r .cell-code}\n# qtm is useful for mapping categorical variables (vs numerical variables, where control of classification methods is more important; colour scheme limited to 16 default)\n```\n:::\n\n\n\n## Spatially Constrained Clustering\n\n## SKATER method (hard classification)\n\n### Step 1: Computing nearest neighbours\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nshan.nb <- poly2nb(shan_sf)\n\n# Notice that we can use shan_sf directly in poly2nb() without converting it into an sp object first. Latest version of spdep package allows most functions to accept sf objects directly.\n\nsummary(shan.nb)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNeighbour list object:\nNumber of regions: 55 \nNumber of nonzero links: 264 \nPercentage nonzero weights: 8.727273 \nAverage number of links: 4.8 \nLink number distribution:\n\n 2  3  4  5  6  7  8  9 \n 5  9  7 21  4  3  5  1 \n5 least connected regions:\n3 5 7 9 47 with 2 links\n1 most connected region:\n8 with 9 links\n```\n\n\n:::\n:::\n\n\n\n### Step 2: Visualising the neighbours\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(st_geometry(shan_sf),\n     border = grey(.5))\n\npts <- st_coordinates(st_centroid(shan_sf))\n\nplot(shan.nb, pts, col = \"blue\", add = TRUE)\n```\n\n::: {.cell-output-display}\n![](In-class_Ex09_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\n### Step 3: Computing minimum spanning tree\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculating edge costs\n\nlcosts <- nbcosts(shan.nb, shan_ict)\n\n# Incorporating these costs into a weights object (style must be B)\n\nshan.w <- nb2listw(shan.nb, lcosts, style = \"B\")\n\nsummary(shan.w)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 55 \nNumber of nonzero links: 264 \nPercentage nonzero weights: 8.727273 \nAverage number of links: 4.8 \nLink number distribution:\n\n 2  3  4  5  6  7  8  9 \n 5  9  7 21  4  3  5  1 \n5 least connected regions:\n3 5 7 9 47 with 2 links\n1 most connected region:\n8 with 9 links\n\nWeights style: B \nWeights constants summary:\n   n   nn       S0       S1        S2\nB 55 3025 76267.65 58260785 522016004\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Computing MST\n\nshan.mst <- mstree(shan.w)\n\n# Visualising MST\n\nplot(st_geometry(shan_sf), border = gray(.5))\n\nplot.mst(shan.mst, pts, col = \"blue\", cex.lab = 0.7, cex.circles = 0.005, add = TRUE)\n```\n\n::: {.cell-output-display}\n![](In-class_Ex09_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n\n### Computing spatially constrained clusters\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nskater.clust6 <- skater(edges = shan.mst[, 1:2],\n                        data = shan_ict,\n                        method = \"euclidean\",\n                        ncuts = 5)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Plot skater tree\n\nplot(st_geometry(shan_sf),\n     border = gray(.5))\n\nplot(skater.clust6,\n     pts,\n     cex.lab = .7,\n     groups.colors = c(\"red\", \"green\", \"blue\", \"brown\", \"pink\"),\n     cex.circles = 0.005,\n     add = TRUE)\n```\n\n::: {.cell-output-display}\n![](In-class_Ex09_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n\n### Visualising the clusters in choropleth map\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngroups_mat <- as.matrix(skater.clust6$groups)\n\nshan_sf_spatialcluster <- cbind(shan_sf_cluster, as.factor(groups_mat)) %>%\n  rename(`skater_CLUSTER` = `as.factor.groups_mat.`)\n\nqtm(shan_sf_spatialcluster, \"skater_CLUSTER\")\n```\n\n::: {.cell-output-display}\n![](In-class_Ex09_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# use as.factor to ensure that clusters are arranged on an ordinal scale OR alphabetically\n```\n:::\n\n\n\n## ClustGeo method (soft classification)\n\nSoft classification: allows user to decide relative importance of attribute/spatial distance (D0/D1). By default, uses cut-off value where D0 and D1 are closest.\n\nIf user wants to emphasise spatial distance, choose cut-off value where D1is higher.\n\nIf user wants to emphasise attribute distance, choose cut-off value where D0 is higher.\n\nComputing spatial distance matrix\n\nUse st_distance() of sf to compute the distance matrix\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndist <- st_distance(shan_sf, shan_sf)\ndistmat <- as.dist(dist)\n```\n:::\n\n\n\nCreate cluster graphs\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncr <- choicealpha(proxmat, distmat, range.alpha = seq(0, 1, 0.1), K = 6, graph = TRUE)\n```\n\n::: {.cell-output-display}\n![](In-class_Ex09_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](In-class_Ex09_files/figure-html/unnamed-chunk-15-2.png){width=672}\n:::\n\n```{.r .cell-code}\n# Use first graph (not the standardised one)\n```\n:::\n\n\n\nSaving clustGeo output\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclustG <- hclustgeo(proxmat, distmat, alpha = 0.2)\n# value of alpha is cut-off point based on cluster graph above\n\n\ngroups <- as.factor(cutree(clustG, k = 6))\n\nshan_sf_clustGeo <- cbind(shan_sf, as.matrix(groups)) %>%\n  rename(`clustGeo` = `as.matrix.groups.`)\n```\n:::\n\n\n\n### Visualising the clusters in choropleth map\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nqtm(shan_sf_clustGeo, \"clustGeo\")\n```\n\n::: {.cell-output-display}\n![](In-class_Ex09_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n\n### Characterising the clusters\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggparcoord(data = shan_sf_clustGeo,\n           columns = c(17:21),\n           scale = \"globalminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE,\n           title = \"Multiple Parallel Coordinates Plots of ICT Variables by Cluster\") +\n  facet_grid(~ clustGeo) +\n  theme(axis.text.x = element_text(angle = 30, size = 4))\n```\n\n::: {.cell-output-display}\n![](In-class_Ex09_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n\n## Comparing cluster maps\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nqtm(shan_sf_cluster, \"CLUSTER\")\n```\n\n::: {.cell-output-display}\n![](In-class_Ex09_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n\n```{.r .cell-code}\nqtm(shan_sf_spatialcluster, \"skater_CLUSTER\")\n```\n\n::: {.cell-output-display}\n![](In-class_Ex09_files/figure-html/unnamed-chunk-19-2.png){width=672}\n:::\n\n```{.r .cell-code}\nqtm(shan_sf_clustGeo, \"clustGeo\")\n```\n\n::: {.cell-output-display}\n![](In-class_Ex09_files/figure-html/unnamed-chunk-19-3.png){width=672}\n:::\n:::\n",
    "supporting": [
      "In-class_Ex09_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}