{
  "hash": "9752a6a8fd7648a1ae9cf24af20878da",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Hands-On Exercise 11\"\nauthor: \"Immanuel Leong\"\ndate: \"November 7, 2024\"\ndate-modified: \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n  warning: false\n  freeze: true\n---\n\n\n\n# **14Â  Geographically Weighted Predictive Models**\n\n## **14.1 Overview**\n\nPredictive modelling uses statistical learning or machine learning techniques to predict outcomes. By and large, the event one wants to predict is in the future. However, a set of known outcome and predictors (also known as variables) will be used to calibrate the predictive models.\n\nGeospatial predictive modelling is conceptually rooted in the principle that the occurrences of events being modeled are limited in distribution. When geographically referenced data are used, occurrences of events are neither uniform nor random in distribution over space. There are geospatial factors (infrastructure, sociocultural, topographic, etc.) that constrain and influence where the locations of events occur. Geospatial predictive modeling attempts to describe those constraints and influences by spatially correlating occurrences of historical geospatial locations with environmental factors that represent those constraints and influences.\n\n### **14.1.1 Learning outcome**\n\nIn this in-class exercise, we will learn how to build predictive model by using geographical random forest method. By the end of this hands-on exercise, you will acquire the skills of:\n\n-   preparing training and test data sets by using appropriate data sampling methods,\n\n-   calibrating predictive models by using both geospatial statistical learning and machine learning methods,\n\n-   comparing and selecting the best model for predicting the future outcome,\n\n-   predicting the future outcomes by using the best model calibrated.\n\n## **14.2 The Data**\n\n-   **Aspatial dataset**:\n\n    -   HDB Resale data: a list of HDB resale transacted prices in Singapore from Jan 2017 onwards. It is in csv format which can be downloaded from Data.gov.sg.\n\n-   **Geospatial dataset**:\n\n    -   *MP14_SUBZONE_WEB_PL*: a polygon feature data providing information of URA 2014 Master Plan Planning Subzone boundary data. It is in ESRI shapefile format. This data set was also downloaded from Data.gov.sg\n\n-   **Locational factors with geographic coordinates**:\n\n    -   Downloaded from **Data.gov.sg**.\n\n        -   **Eldercare** data is a list of eldercare in Singapore. It is in shapefile format.\n\n        -   **Hawker Centre** data is a list of hawker centres in Singapore. It is in geojson format.\n\n        -   **Parks** data is a list of parks in Singapore. It is in geojson format.\n\n        -   **Supermarket** data is a list of supermarkets in Singapore. It is in geojson format.\n\n        -   **CHAS clinics** data is a list of CHAS clinics in Singapore. It is in geojson format.\n\n        -   **Childcare service** data is a list of childcare services in Singapore. It is in geojson format.\n\n        -   **Kindergartens** data is a list of kindergartens in Singapore. It is in geojson format.\n\n    -   Downloaded from **Datamall.lta.gov.sg**.\n\n        -   **MRT** data is a list of MRT/LRT stations in Singapore with the station names and codes. It is in shapefile format.\n\n        -   **Bus stops** data is a list of bus stops in Singapore. It is in shapefile format.\n\n-   **Locational factors without geographic coordinates**:\n\n    -   Downloaded from **Data.gov.sg**.\n\n        -   **Primary school** data is extracted from the list on General information of schools from data.gov portal. It is in csv format.\n\n    -   Retrieved/Scraped from **other sources**\n\n        -   **CBD** coordinates obtained from Google.\n\n        -   **Shopping malls** data is a list of Shopping malls in Singapore obtained from [Wikipedia](https://en.wikipedia.org/wiki/List_of_shopping_malls_in_Singapore).\n\n        -   **Good primary schools** is a list of primary schools that are ordered in ranking in terms of popularity and this can be found at [Local Salary Forum](https://www.salary.sg/2021/best-primary-schools-2021-by-popularity).\n\n## **14.3 Installing and Loading R packages**\n\nThis code chunk performs 3 tasks:\n\n-   A list called packages will be created and will consists of all the R packages required to accomplish this exercise.\n\n-   Check if R packages on package have been installed in R and if not, they will be installed.\n\n-   After all the R packages have been installed, they will be loaded.\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    pacman::p_load(sf, spdep, GWmodel, SpatialML, \n                   tmap, rsample, Metrics, tidyverse)\n    ```\n    :::\n\n\n\n## **14.4 Preparing Data**\n\n### **14.4.1 Reading data file to rds**\n\nReading the input data sets. It is in simple feature data frame.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmdata <- read_rds(\"data/model/mdata.rds\")\n```\n:::\n\n\n\n### **14.4.2 Data Sampling**\n\nThe entire data are split into training and test data sets with 65% and 35% respectively by using *initial_split()* of **rsample** package. rsample is one of the package of tigymodels.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\n\nresale_split <- initial_split(mdata, \n                              prop = 6.5/10,)\n\ntrain_data <- training(resale_split)\n\ntest_data <- testing(resale_split)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(train_data, \"data/model/train_data.rds\")\nwrite_rds(test_data, \"data/model/test_data.rds\")\n```\n:::\n\n\n\n## **14.5 Computing Correlation Matrix**\n\nBefore loading the predictors into a predictive model, it is always a good practice to use correlation matrix to examine if there is sign of multicolinearity.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmdata_nogeo <- mdata %>% st_drop_geometry()\n\ncorrplot::corrplot(cor(mdata_nogeo[, 2:17]), \n                   diag = FALSE, \n                   order = \"AOE\",\n                   tl.pos = \"td\", \n                   tl.cex = 0.5, \n                   method = \"number\", \n                   type = \"upper\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex11_files/figure-html/unnamed-chunk-5-1.png){width=1920}\n:::\n:::\n\n\n\nThe correlation matrix above shows that all the correlation values are below 0.8. Hence, there is no sign of multicollinearity.\n\n## **14.6 Retriving the Stored Data**\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrain_data <- read_rds(\"data/model/train_data.rds\")\ntest_data <- read_rds(\"data/model/test_data.rds\")\n```\n:::\n\n\n\n## **14.7 Building a non-spatial multiple linear regression**\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprice_mlr <- lm(resale_price ~ floor_area_sqm +\n                  storey_order + remaining_lease_mths +\n                  PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +\n                  PROX_MRT + PROX_PARK + PROX_GOOD_PRISCH + PROX_MALL +\n                  PROX_CHAS + PROX_SUPERMARKET + \n                  WITHIN_350M_KINDERGARTEN +\n                  WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\n                  WITHIN_1KM_PRISCH,\n                data = train_data)\n\nsummary(price_mlr)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = resale_price ~ floor_area_sqm + storey_order + remaining_lease_mths + \n    PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER + PROX_MRT + PROX_PARK + \n    PROX_GOOD_PRISCH + PROX_MALL + PROX_CHAS + PROX_SUPERMARKET + \n    WITHIN_350M_KINDERGARTEN + WITHIN_350M_CHILDCARE + WITHIN_350M_BUS + \n    WITHIN_1KM_PRISCH, data = train_data)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-215500  -39329   -2061   35882  457192 \n\nCoefficients:\n                           Estimate Std. Error t value Pr(>|t|)    \n(Intercept)              103911.650  10586.618   9.815  < 2e-16 ***\nfloor_area_sqm             2851.494     90.977  31.343  < 2e-16 ***\nstorey_order              14171.222    338.680  41.843  < 2e-16 ***\nremaining_lease_mths        342.656      4.601  74.476  < 2e-16 ***\nPROX_CBD                 -17867.040    233.448 -76.535  < 2e-16 ***\nPROX_ELDERLYCARE         -14911.480    998.345 -14.936  < 2e-16 ***\nPROX_HAWKER              -18379.532   1294.887 -14.194  < 2e-16 ***\nPROX_MRT                 -31730.480   1744.108 -18.193  < 2e-16 ***\nPROX_PARK                 -8187.270   1514.995  -5.404 6.66e-08 ***\nPROX_GOOD_PRISCH           2667.018    340.037   7.843 4.82e-15 ***\nPROX_MALL                -12988.289   2017.587  -6.438 1.27e-10 ***\nPROX_CHAS                 -9223.168   6417.595  -1.437    0.151    \nPROX_SUPERMARKET         -27036.308   4496.035  -6.013 1.88e-09 ***\nWITHIN_350M_KINDERGARTEN   8486.601    631.011  13.449  < 2e-16 ***\nWITHIN_350M_CHILDCARE     -4416.925    353.505 -12.495  < 2e-16 ***\nWITHIN_350M_BUS             887.666    222.500   3.990 6.67e-05 ***\nWITHIN_1KM_PRISCH         -7795.347    490.834 -15.882  < 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 61470 on 10318 degrees of freedom\nMultiple R-squared:  0.7389,\tAdjusted R-squared:  0.7385 \nF-statistic:  1825 on 16 and 10318 DF,  p-value: < 2.2e-16\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(price_mlr, \"data/model/price_mlr.rds\" ) \n```\n:::\n\n\n\n## **14.9 Preparing coordinates data**\n\n### **14.9.1 Extracting coordinates data**\n\nThe code chunk below extract the x,y coordinates of the full, training and test data sets.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncoords <- st_coordinates(mdata)\ncoords_train <- st_coordinates(train_data)\ncoords_test <- st_coordinates(test_data)\n```\n:::\n\n\n\nBefore continue, we write all the output into rds for future use.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(coords_train, \"data/model/coords_train.rds\" )\nwrite_rds(coords_test, \"data/model/coords_test.rds\" )\n```\n:::\n\n\n\n### **14.9.2 Dropping geometry field**\n\nFirst, we will drop geometry column of the sf data.frame by using `st_drop_geometry()` of sf package.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrain_data <- train_data %>% \n  st_drop_geometry()\n```\n:::\n\n\n\n## **14.10 Calibrating Random Forest Model**\n\nIn this section, we will learn how to calibrate a model to predict HDB resale price by using random forest function ofÂ [**ranger**](https://cran.r-project.org/web/packages/ranger/index.html)Â package.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\n\nrf <- ranger(resale_price ~ floor_area_sqm +\n               storey_order + remaining_lease_mths +\n               PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +\n               PROX_MRT + PROX_PARK + PROX_GOOD_PRISCH + PROX_MALL +\n               PROX_SUPERMARKET + \n               WITHIN_350M_KINDERGARTEN +\n               WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\n               WITHIN_1KM_PRISCH,\n             data = train_data)\n\nrf\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRanger result\n\nCall:\n ranger(resale_price ~ floor_area_sqm + storey_order + remaining_lease_mths +      PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER + PROX_MRT + PROX_PARK +      PROX_GOOD_PRISCH + PROX_MALL + PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +      WITHIN_350M_CHILDCARE + WITHIN_350M_BUS + WITHIN_1KM_PRISCH,      data = train_data) \n\nType:                             Regression \nNumber of trees:                  500 \nSample size:                      10335 \nNumber of independent variables:  15 \nMtry:                             3 \nTarget node size:                 5 \nVariable importance mode:         none \nSplitrule:                        variance \nOOB prediction error (MSE):       706732428 \nR squared (OOB):                  0.9510865 \n```\n\n\n:::\n:::\n\n\n\n## **14.11 Calibrating Geographical Random Forest Model**\n\nIn this section, we will learn how to calibrate a model to predict HDB resale price by using `grf()` of [**SpatialML**](https://cran.r-project.org/web/packages/ranger/index.html) package.\n\n### **14.11.1 Calibrating using training data**\n\nThe code chunk below calibrates a geographic random forest model by using `grf()` of **SpatialML** package.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\n\ngwRF_adaptive <- grf(formula = resale_price ~ floor_area_sqm +\n                       storey_order + remaining_lease_mths +\n                       PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +\n                       PROX_MRT + PROX_PARK + PROX_GOOD_PRISCH +\n                       PROX_MALL + PROX_SUPERMARKET +\n                       WITHIN_350M_KINDERGARTEN +\n                       WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\n                       WITHIN_1KM_PRISCH,\n                     dframe = train_data, \n                     bw = 55,\n                     kernel = \"adaptive\",\n                     coords = coords_train)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRanger result\n\nCall:\n ranger(resale_price ~ floor_area_sqm + storey_order + remaining_lease_mths +      PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER + PROX_MRT + PROX_PARK +      PROX_GOOD_PRISCH + PROX_MALL + PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +      WITHIN_350M_CHILDCARE + WITHIN_350M_BUS + WITHIN_1KM_PRISCH,      data = train_data, num.trees = 500, mtry = 5, importance = \"impurity\",      num.threads = NULL) \n\nType:                             Regression \nNumber of trees:                  500 \nSample size:                      10335 \nNumber of independent variables:  15 \nMtry:                             5 \nTarget node size:                 5 \nVariable importance mode:         impurity \nSplitrule:                        variance \nOOB prediction error (MSE):       656802174 \nR squared (OOB):                  0.9545422 \n          floor_area_sqm             storey_order     remaining_lease_mths \n            6.621418e+12             1.313952e+13             3.134407e+13 \n                PROX_CBD         PROX_ELDERLYCARE              PROX_HAWKER \n            5.125721e+13             5.106343e+12             4.184528e+12 \n                PROX_MRT                PROX_PARK         PROX_GOOD_PRISCH \n            5.841774e+12             3.603766e+12             1.349097e+13 \n               PROX_MALL         PROX_SUPERMARKET WITHIN_350M_KINDERGARTEN \n            3.306898e+12             1.926516e+12             6.066251e+11 \n   WITHIN_350M_CHILDCARE          WITHIN_350M_BUS        WITHIN_1KM_PRISCH \n            1.077512e+12             1.144910e+12             5.514888e+12 \n     Min.   1st Qu.    Median      Mean   3rd Qu.      Max. \n-247477.6  -13000.0     509.2     819.0   14977.8  314441.7 \n     Min.   1st Qu.    Median      Mean   3rd Qu.      Max. \n-76723.25  -3140.11     58.71     46.42   3479.93  79696.68 \n                               Min          Max        Mean         StD\nfloor_area_sqm                   0 431975575434 18288265591 43715250682\nstorey_order             309081841 269648519078 16767830484 24031695547\nremaining_lease_mths     627522512 563327624200 35926796799 76082729612\nPROX_CBD                  47894731 398671457654 10792715969 28617124270\nPROX_ELDERLYCARE          44120283 322858142164  9439492308 23214236981\nPROX_HAWKER               41495959 386837293462  9265314665 22103993336\nPROX_MRT                  49656527 291942580611  8515430814 19205016521\nPROX_PARK                 50547679 272387249683  8200503834 18515077850\nPROX_GOOD_PRISCH          38633940 297080086095  9659909574 21780026541\nPROX_MALL                 43893979 441183316618 10037248202 27023279272\nPROX_SUPERMARKET          34093042 410994482979  9686132779 25650617064\nWITHIN_350M_KINDERGARTEN         0 191395209782  2487493998 12765127231\nWITHIN_350M_CHILDCARE            0 254501573812  4756645302 16925354940\nWITHIN_350M_BUS                  0 185910728218  4070867877 11156576523\nWITHIN_1KM_PRISCH                0 162981063922  1424494263  6429551333\n```\n\n\n:::\n:::\n\n\n\nLetâs save the model output by using the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(gwRF_adaptive, \"data/model/gwRF_adaptive.rds\")\n```\n:::\n\n\n\nThe code chunk below can be used to retrieve the save model in future.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwRF_adaptive <- read_rds(\"data/model/gwRF_adaptive.rds\")\n```\n:::\n\n\n\n### **14.11.2 Predicting by using test data**\n\n#### 14.11.2.1 Preparing the test data\n\nThe code chunk below will be used to combine the test data with its corresponding coordinates data.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_data <- cbind(test_data, coords_test) %>%\n  st_drop_geometry()\n```\n:::\n\n\n\n#### 14.11.2.2 Predicting with test data\n\nNext, `predict.grf()` of spatialML package will be used to predict the resale value by using the test data and gwRF_adaptive model calibrated earlier.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwRF_pred <- predict.grf(gwRF_adaptive, \n                           test_data, \n                           x.var.name = \"X\",\n                           y.var.name = \"Y\", \n                           local.w = 1,\n                           global.w = 0)\n```\n:::\n\n\n\nBefore moving on, let us save the output into rds file for future use.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(gwRF_pred, \"data/model/GRF_pred.rds\")\n```\n:::\n\n\n\n#### 14.11.2.3 Converting the predicting output into a data frame\n\nThe output of theÂ `predict.grf()`Â is a vector of predicted values. It is wiser to convert it into a data frame for further visualisation and analysis.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nGRF_pred <- read_rds(\"data/model/GRF_pred.rds\")\nGRF_pred_df <- as.data.frame(GRF_pred)\n```\n:::\n\n\n\nIn the code chunk below, `cbind()` is used to append the predicted values onto test_data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_data_p <- cbind(test_data, GRF_pred_df)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(test_data_p, \"data/model/test_data_p.rds\")\n```\n:::\n\n\n\n### **14.11.3 Calculating Root Mean Square Error**\n\nThe root mean square error (RMSE) allows us to measure how far predicted values are from observed values in a regression analysis. In the code chunk below, rmse() of Metrics package is used to compute the RMSE.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrmse(test_data_p$resale_price, \n     test_data_p$GRF_pred)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 27234.57\n```\n\n\n:::\n:::\n\n\n\n### **14.11.4 Visualising the predicted values**\n\nAlternatively, scatterplot can be used to visualise the actual resale price and the predicted resale price by using the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = test_data_p,\n       aes(x = GRF_pred,\n           y = resale_price)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex11_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "Hands-on_Ex11_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}