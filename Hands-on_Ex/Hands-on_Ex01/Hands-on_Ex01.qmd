---
title: "Hands-On Exercise 1"
author: "Immanuel"
---

## 1.1 Overview

In this hands-on exercise, I learn how to perform geospatial data science tasks in R by using **sf** package.

## **1.2 Data Acquisition**

In this hands-on exercise, I extract the necessary data sets from the following sources:

-   Master Plan 2014 Subzone Boundary (Web) from [data.gov.sg](https://data.gov.sg/)

-   Pre-Schools Location from [data.gov.sg](https://data.gov.sg/)

-   Cycling Path from [LTADataMall](https://www.mytransport.sg/content/mytransport/home/dataMall.html)

-   Latest version of Singapore Airbnb listing data from [Inside Airbnb](http://insideairbnb.com/get-the-data.html)

## **1.3 Getting Started**

In this hands-on exercise, two R packages will be used. They are:

-   **sf** for importing, managing, and processing geospatial data, and

-   **tidyverse** for performing data science tasks such as importing, wrangling and visualising data.

[`p_load`](https://cran.r-project.org/web/packages/pacman/pacman.pdf) function pf [**pacman**](https://github.com/trinker/pacman) package is used to install and load sf and tidyverse packages into R environment.

```{r}
pacman::p_load(sf, tidyverse)

```

## **1.4 Importing Geospatial Data**

In this section, I import the following geospatial data into R by using [*st_read()*](https://r-spatial.github.io/sf/reference/st_read.html) of **sf** package:

-   `MP14_SUBZONE_WEB_PL`, a polygon feature layer in ESRI shapefile format,

-   `CyclingPath`, a line feature layer in ESRI shapefile format, and

-   `PreSchool`, a point feature layer in kml file format.

### **1.4.1 Importing polygon feature data in shapefile format**

The code chunk below uses *st_read()* function of **sf** package to import `MP14_SUBZONE_WEB_PL` shapefile into R as a polygon feature data frame. Note that when the input geospatial data is in shapefile format, two arguments will be used, namely: `dsn` to define the data path and `layer` to provide the shapefile name.

```{r}
mpsz = st_read(dsn = "data/geospatial", layer = "MP14_SUBZONE_WEB_PL")
```

The message above reveals that the geospatial objects are multipolygon features. There are a total of 323 multipolygon features and 15 fields in `mpsz` simple feature data frame. `mpsz` is in **svy21** projected coordinates systems. The bounding box provides the x extend and y extend of the data.

### **1.4.2 Importing polyline feature data in shapefile form**

The code chunk below uses *st_read()* function of **sf** package to import `CyclingPath` shapefile into R as line feature data frame.

```{r}
cyclingpath = st_read(dsn = "data/geospatial", layer = "CyclingPathGazette")
```

The message above reveals that there are a total of 2558 features and 2 fields in `cyclingpath` linestring feature data frame and it is in **svy21** projected coordinates system too.

### **1.4.3 Importing GIS data in kml format**

The `PreSchoolsLocation` is in kml format. The code chunk below will be used to import the kml into R.

```{r}
preschool = st_read("data/geospatial/PreSchoolsLocation.kml")
```

The message above reveals that `preschool` is a point feature data frame. There are a total of 2290 features and 2 fields. Different from the previous two simple feature data frame, preschool is in **wgs84** coordinates system.

## **1.5 Checking the Content of A Simple Feature Data Frame**

### **1.5.1 Working with *st_geometry()***

The column in the sf data.frame that contains the geometries is a list, of class `sfc`. We can retrieve the geometry list-column using *st_geometry()*.

```{r}
st_geometry(mpsz)
```

### **1.5.2 Working with glimpse()**

We also would like to learn more about the associated attribute information in the data frame. This is the time we use find *glimpse()* of **dplyr**.

```{r}
glimpse(mpsz)
```

### **1.5.3 Working with *head()***

```{r}
head(mpsz, n = 5)
```

## **1.6 Plotting the Geospatial Data**

We can visualise the geospatial features using *plot()* of R Graphic.

```{r}
plot(mpsz)
```

We can choose to plot only the geometry.

```{r}
plot(st_geometry(mpsz))
```

Alternatively, we can also choose the plot the sf object by using a specific attribute as shown in the code chunk below.

```{r}
plot(mpsz["PLN_AREA_N"])
```

## **1.7 Working with Projection**

Map projection is an important property of a geospatial data. In order to perform geoprocessing using two geospatial data, we need to ensure that both geospatial data are projected using similar coordinate system.

### **1.7.1 Assigning EPSG code to a simple feature data frame**

```{r}
st_crs(mpsz)
```

Although `mpsz` data frame is projected in svy21 but when we read until the end of the print, it indicates that the EPSG is 9001. This is a wrong EPSG code because the correct EPSG code for svy21 should be [3414](https://epsg.io/3414).

In order to assign the correct EPSG code to `mpsz` data frame, *st_set_crs()* of **sf** package is used as shown in the code chunk below.

```{r}
mpsz3414 <- st_set_crs(mpsz, 3414)
```

Now, let us check the CSR again by using the code chunk below.

```{r}
st_crs(mpsz3414)
```

Notice that the EPSG code is 3414 now.

### **1.7.2 Transforming the projection of preschool from wgs84 to svy21.**

In geospatial analytics, it is very common for us to transform the original data from geographic coordinate system to projected coordinate system. This is because geographic coordinate system is not appropriate if the analysis need to use distance or/and area measurements.

The print below reveals that the preschool simple feature data frame is in wgs84 coordinate system.

```{r}
st_geometry(preschool)
```

This is a scenario where *st_set_crs()* is not appropriate and *st_transform()* of sf package should be used. This is because we need to reproject `preschool` from one coordinate system to another coordinate system mathemetically.

```{r}
preschool3414 <- st_transform(preschool, crs = 3414)
```

Next, let us display the content of preschool3414 sf data frame as shown below.

```{r}
st_geometry(preschool3414)
```

Notice that it is in svy21 projected coordinate system now. Furthermore, if you refer to *Bounding box:*, the values are greater than 0-360 range of decimal degree commonly used by most of the geographic coordinate systems.

## **1.8 Importing and Converting An Aspatial Data**

In practice, it is not unusual that we will come across data such as `listing` of Inside Airbnb. We call this kind of data aspatial data. This is because it is not a geospatial data but among the data fields, there are two fields that capture the x- and y-coordinates of the data points.

In this section, we import an aspatial data into R environment and save it as a tibble data frame. Next, we convert it into a simple feature data frame.

### **1.8.1 Importing the aspatial data**

Since `listings` data set is in csv file format, we will use read_csv() of **readr** package to import `listing.csv` as shown the code chunk below. The output R object is called `listings` and it is aÂ [tibble data frame](#0).

```{r}
listings <- read_csv("data/aspatial/listings.csv")
```

After importing the data file into R, it is important for us to examine if the data file has been imported correctly.

```{r}
list(listings)
```

The output reveals that `listing` tibble data frame consists of 3540 rows and 75 columns. Two useful fields we are going to use in the next phase are `latitude` and `longitude`. Note that they are in decimal degree format. As a best guess, we will assume that the data is in **wgs84** Geographic Coordinate System.

### **1.8.2 Creating a simple feature data frame from an aspatial data frame**

The code chunk below converts `listing` data frame into a simple feature data frame by using [*st_as_sf()*](https://r-spatial.github.io/sf/reference/st_as_sf.html) of **sf** packages.

```{r}
listings_sf <- st_as_sf(listings, 
                     coords = c("longitude", "latitude"), 
                     crs = 4326) %>%
  st_transform(crs = 3414)
  
```

Let us examine the content of this newly created simple feature data frame.

```{r}
glimpse(listings_sf)
```

Table above shows the content of `listing_sf`. Notice that a new column called `geometry` has been added into the data frame. On the other hand, the `longitude` and `latitude` columns have been dropped from the data frame.

## **1.9 Geoprocessing with sf package**

### **1.9.1 Buffering**

The scenario:

The authority is planning to upgrade the exiting cycling path. To do so, they need to acquire 5 metres of reserved land on the both sides of the current cycling path. You are tasked to determine the extend of the land need to be acquired and their total area.

The solution:

Firstly, [*st_buffer()*](https://r-spatial.github.io/sf/reference/geos_unary.html) of **sf** package is used to compute the 5-meter buffers around cycling paths.

```{r}
buffer_cycling <- st_buffer(cyclingpath, dist = 5, nQuadSegs = 30)
```

This is followed by calculating the area of the buffers as shown in the code chunk below.

```{r}
buffer_cycling$AREA <- st_area(buffer_cycling)
```

Lastly, sum() of Base R will be used to derive the total land involved.

```{r}
sum(buffer_cycling$AREA)
```

### **1.9.2 Point-in-polygon count**

The scenario:

A pre-school service group want to find out the numbers of pre-schools in each Planning Subzone.

The solution:

The code chunk below performs two operations at one go. Firstly, identify pre-schools located inside each Planning Subzone by using [st_intersects()](https://r-spatial.github.io/sf/reference/geos_binary_pred.html). Next, [*length()*](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/length) of Base R is used to calculate numbers of pre-schools that fall inside each planning subzone.

```{r}
mpsz3414$`PreSch Count`<- lengths(st_intersects(mpsz3414, preschool3414))
```

You can check the summary statistics of the newly derived *PreSch Count* field by using *summary()* as shown in the code chunk below.

```{r}
summary(mpsz3414$`PreSch Count`)
```

To list the planning subzone with the most number of pre-school, the *top_n()* of **dplyr** package is used as shown in the code chunk below.

```{r}
top_n(mpsz3414, 1, `PreSch Count`)
```

To calculate the density of pre-school by planning subzone, first use [*st_area()*](https://r-spatial.github.io/sf/reference/geos_measures.html) of **sf** package to derive the area of each planning subzone.

```{r}
mpsz3414$Area <- mpsz3414 %>% st_area()
```

Next, mutate() of dplyr package is used to compute the density by using the code chunk below.

```{r}
mpsz3414 <- mpsz3414 %>%
  mutate(`PreSch Density` = `PreSch Count`/ Area * 1000000)
```

## **1.10 Exploratory Data Analysis (EDA)**

In practice, many geospatial analytics start with Exploratory Data Analysis. In this section, we use appropriate [ggplot2](https://ggplot2.tidyverse.org/) functions to create functional and yet truthful statistical graphs for EDA purposes.

Firstly, we will plot a histogram to reveal the distribution of `PreSch Density`. Conventionally, *hist()* of R Graphics will be used as shown in the code chunk below.

```{r}
hist(mpsz3414$`PreSch Density`)
```

Although the syntax is very easy to use however the output is far from meeting publication quality. Furthermore, the function has limited room for further customisation.

In the code chunk below, appropriate **ggplot2** functions will be used.

```{r}
ggplot(data = mpsz3414,
       aes(x = as.numeric(`PreSch Density`))) +
  geom_histogram(bins = 20, color = "black", fill = "light blue") +
  labs(title = "Are pre-school even distributed in Singapore?",
       subtitle= "There are many planning sub-zones with a single pre-school, on the other hand, \nthere are two planning sub-zones with at least 20 pre-schools",
       x = "Pre-school density (per km sq)",
       y = "Frequency")
```

Next, using ggplot2 method, we plot a scatterplot showing the relationship between Pre-school Density and Pre-school Count.

```{r}
ggplot(data = mpsz3414,
       aes(y = `PreSch Count` , x = as.numeric(`PreSch Density`))) +
  geom_point(color="black", fill="light blue") +
  xlim(0, 40) +
  ylim(0, 40) +
  labs(title = "", x = "Pre-school density (per km sq)", y = "Pre-school count")
  
```
