---
title: "Hands-on Exercise 3"
author: "Immanuel Leong"
date: "August 30, 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  warning: false
  freeze: true
---

# **4  1st Order Spatial Point Patterns Analysis Methods**

## **4.1 Overview**

Using appropriate functions of [spatstat](https://cran.r-project.org/web/packages/spatstat/), this hands-on exercise aims to discover the spatial point processes of childcare centres in Singapore.

## **4.2 The data**

To provide answers to the questions above, three data sets will be used. They are:

-   `CHILDCARE`, a point feature data providing both location and attribute information of childcare centres.

-   `MP14_SUBZONE_WEB_PL`, a polygon feature data providing information of URA 2014 Master Plan Planning Subzone boundary data. It is in ESRI shapefile format.

-   `CostalOutline`, a polygon feature data showing the national boundary of Singapore. It is provided by SLA and is in ESRI shapefile format.

## **4.3 Installing and Loading the R packages**

In this hands-on exercise, five R packages will be used, they are:

-   [**sf**](https://r-spatial.github.io/sf/), a relatively new R package specially designed to import, manage and process vector-based geospatial data in R.

-   [**spatstat**](https://spatstat.org/), which has a wide range of useful functions for point pattern analysis. In this hands-on exercise, it will be used to perform 1st- and 2nd-order spatial point patterns analysis and derive kernel density estimation (KDE) layer.

-   [**raster**](https://cran.r-project.org/web/packages/raster/) which reads, writes, manipulates, analyses and model of gridded spatial data (i.e. raster). In this hands-on exercise, it will be used to convert image output generate by spatstat into raster format.

-   [**tmap**](https://cran.r-project.org/web/packages/tmap/index.html) which provides functions for plotting cartographic quality static point patterns maps or interactive maps by using [leaflet](https://leafletjs.com/) API.

-   **tidyverse** for performing data science tasks such as importing, wrangling and visualising data.

    Use the code chunk below to install and launch the five R packages.

```{r}
pacman::p_load(sf, spatstat, raster, tmap, tidyverse)
```

## **4.4 Spatial Data Wrangling**

In this section, [*st_read()*](https://r-spatial.github.io/sf/reference/st_read.html) of **sf** package will be used to import these three geospatial data sets into R.

```{r}
childcare_sf <- st_read("data/child-care-services-geojson.geojson")
```

```{r}
sg_sf <- st_read(dsn = "data", layer = "CostalOutline")
```

```{r}
mpsz_sf <- st_read(dsn = "data", layer = "MP14_SUBZONE_WEB_PL")
```

Before we can use these data for analysis, it is important for us to ensure that they are projected in same projection system.

> DIY: Using the appropriate **sf** function you learned in Hands-on Exercise 2, retrieve the referencing system information of these geospatial data.

```{r}
st_crs(childcare_sf)

```

```{r}
st_crs(sg_sf)
```

```{r}
st_crs(mpsz_sf)
```

Notice that except `childcare_sf`, both `mpsz_sf` and `sg_sf` do not have proper crs information. The EPSG code indicated in the prints for mpsz_sf and sg_sf is 9001 even though both data frames are projected in svy21. The correct EPSG code for svy21 should be 3414.

> DIY: Using the method you learned in Lesson 2, assign the correct crs to mpsz_sf and sg_sf simple feature data frames.

Assign the correct EPSG code for svy21 to mpsz_sf and sg_sf with the following code chunk.

```{r}
mpsz_sf3414 <- st_set_crs(mpsz_sf, 3414)
sg_sf3414 <- st_set_crs(sg_sf, 3414)
```

> DIY: If necessary, changing the referencing system to Singapore national projected coordinate system.

Meanwhile, childcare_sf is projected in the geographical coordinate system wgs84. We reproject it to the projected coordinate system svy21, which is more appropriate when the analysis requires distance and/or area measurements.

```{r}
childcare_sf3414 <- st_transform(childcare_sf, crs = 3414)

st_crs(childcare_sf3414)
```

### **4.4.2 Mapping the geospatial data sets**

> DIY: Using the mapping methods you learned in Hands-on Exercise 2, prepare a map as shown below.

```{r}

tmap_mode("plot")

tm_shape(sg_sf3414) + 
  tm_polygons() +
    tm_shape(mpsz_sf3414) + 
      tm_polygons() + 
       tm_shape(childcare_sf3414) + 
         tm_dots()
```

Notice that all the geospatial layers are within the same map extend. This shows that their referencing system and coordinate values are referred to similar spatial context. This is very important in any geospatial analysis.

Alternatively, we can also prepare a pin map by using the code chunk below.

```{r}
tmap_mode("view")

tm_shape(childcare_sf) +
  tm_dots()
```

Notice that at the interactive mode, **tmap** is using [**leaflet for R**](https://rstudio.github.io/leaflet/) API. The advantage of this interactive pin map is it allows us to navigate and zoom around the map freely. We can also query the information of each simple feature (i.e. the point) by clicking of them. Last but not least, you can also change the background of the internet map layer. Currently, three internet map layers are provided. They are: ESRI.WorldGrayCanvas, OpenStreetMap, and ESRI.WorldTopoMap. The default is ESRI.WorldGrayCanvas.

> Reminder: Always remember to switch back to plot mode after the interactive map. This is because, each interactive mode will consume a connection. You should also avoid displaying ecessive numbers of interactive maps (i.e. not more than 10) in one RMarkdown document when publish on Netlify.

```{r}
tmap_mode("plot")
```

## **4.5 Geospatial Data wrangling**

In this section, we will learn how to convert simple feature data frame to sp’s Spatial\* class.

### **4.5.1 Converting sf data frames to sp’s Spatial\* class**

The code chunk below uses [*as_Spatial()*](https://r4gdsa.netlify.app/chap04.html) of **sf** package to convert the three geospatial data from simple feature data frame to sp’s Spatial\* class.

```{r}
childcare <- as_Spatial(childcare_sf3414)
mpsz <- as_Spatial(mpsz_sf3414)
sg <- as_Spatial(sg_sf3414)
```

> DIY: Using appropriate function, display the information of these three Spatial\* classes as shown below.

```{r}
childcare
```

```{r}
mpsz
```

```{r}
sg
```

Notice that the geospatial data have been converted into their respective sp’s Spatial\* classes now.

### **4.5.2 Converting the Spatial\* class into generic sp format**

**spatstat** requires the analytical data in ***ppp*** object form.

The codes chunk below converts the Spatial\* classes into generic sp objects.

```{r}
childcare_sp <- as(childcare, "SpatialPoints")
sg_sp <- as(sg, "SpatialPolygons")
```

Next, you should display the sp objects properties as shown below.

```{r}
childcare_sp
```

```{r}
sg_sp
```

### **4.5.3 Converting the generic sf format into spatstat’s ppp format**

We will use *as.ppp()* function of **spatstat** to convert the spatial data into **spatstat**’s ***ppp*** object format.

```{r}
childcare_ppp <- as.ppp(st_coordinates(childcare_sf3414), st_bbox(childcare_sf3414))
childcare_ppp
```

Now, let us plot ***childcare_ppp*** and examine the difference.

```{r}
plot(childcare_ppp)
```

You can take a quick look at the summary statistics of the newly created ppp object by using the code chunk below.

```{r}
summary(childcare_ppp)
```

### **4.5.4 Handling duplicated points**

We can check the duplication in a ***ppp*** object by using the code chunk below.

```{r}
any(duplicated(childcare_ppp))
```

To count the number of co-incident points, we will use the *multiplicity()* function as shown in the code chunk below.

```{r}
multiplicity(childcare_ppp)
```

If we want to know how many locations have more than one point event, we can use the code chunk below.

```{r}
sum(multiplicity(childcare_ppp) > 1 )
```

The output shows that there are 128 duplicated point events.

To view the locations of these duplicate point events, we will plot `childcare` data by using the code chunk below.

```{r}
tmap_mode("view")

tm_shape(childcare_sf3414) +
  tm_dots(alpha=0.4, size=0.05)
```

```{r}
tmap_mode("plot")
```

It is difficult to identify the duplicates from this map. There are three ways to overcome this problem. The easiest way is to delete the duplicates. But, that will also mean that some useful point events will be lost.

The second solution is use *jittering*, which will add a small perturbation to the duplicate points so that they do not occupy the exact same space.

The third solution is to make each point “unique” and then attach the duplicates of the points to the patterns as **marks**, as attributes of the points. Then you would need analytical techniques that take into account these marks.

The code chunk below implements the jittering approach.

```{r}
childcare_ppp_jit <- rjitter(childcare_ppp, retry = TRUE, nsim = 1, drop = TRUE)
```

DIY: Using the method you learned in previous section, check if any duplicated point in this geospatial data.

```{r}
any(duplicated(childcare_ppp_jit))

sum(multiplicity(childcare_ppp_jit) > 1)
```

### **4.5.5 Creating *owin* object**

When analysing spatial point patterns, it is a good practice to confine the analysis with a geographical area like Singapore boundary. In **spatstat**, an object called ***owin*** is specially designed to represent this polygonal region.

The code chunk below is used to covert *sg* SpatialPolygon object into owin object of **spatstat**.

```{r}
sg_owin <- as.owin(sg_sf)
```

The ouput object can be displayed by using *plot()* function

```{r}
plot(sg_owin)
```

and *summary()* function of Base R.

```{r}
summary(sg_owin)
```

### **4.5.6 Combining point events object and owin object**

In this last step of geospatial data wrangling, we will extract childcare events that are located within Singapore by using the code chunk below.

```{r}
childcareSG_ppp <- childcare_ppp[sg_owin]
```

The output object combined both the point and polygon feature in one ppp object class as shown below.

```{r}
summary(childcareSG_ppp)
```

```{r}
plot(childcareSG_ppp)
```

## **4.6 First-order Spatial Point Patterns Analysis**

In this section, you will learn how to perform first-order SPPA by using **spatstat** package. The hands-on exercise will focus on:

-   deriving **kernel density estimation (KDE)** layer for visualising and exploring the intensity of point processes,

-   performing **Confirmatory Spatial Point Patterns Analysis** by using **Nearest Neighbour** statistics.

### **4.6.1 Kernel Density Estimation**

In this section, you will learn how to compute the kernel density estimation (KDE) of childcare services in Singapore.

#### 4.6.1.1 Computing kernel density estimation using automatic bandwidth selection method

The code chunk below computes a kernel density by using the following configurations of [*density()*](https://rdrr.io/cran/spatstat/man/density.ppp.html) of **spatstat**:

-   [*bw.diggle()*](https://rdrr.io/cran/spatstat/man/bw.diggle.html) automatic bandwidth selection method. Other recommended methods are [*bw.CvL()*](https://rdrr.io/cran/spatstat/man/bw.CvL.html), [*bw.scott()*](https://rdrr.io/cran/spatstat/man/bw.scott.html) or [*bw.ppl()*](https://rdrr.io/cran/spatstat/man/bw.ppl.html).

-   The smoothing kernel used is *gaussian*, which is the default. Other smoothing methods are: “epanechnikov”, “quartic” or “disc”.

-   The intensity estimate is corrected for edge effect bias by using method described by Jones (1993) and Diggle (2010, equation 18.9). The default is *FALSE*.

```{r}
kde_childcareSG_bw <- density(childcareSG_ppp, sigma = bw.diggle, edge = TRUE, kernel = "gaussian")
```

The *plot()* function of Base R is then used to display the kernel density derived.

```{r}
plot(kde_childcareSG_bw)
```

The density values of the output range from 0 to 0.000025 which is way too small to comprehend. This is because the default unit of measurement of svy21 is in meter. As a result, the density values computed is in “number of points per square meter”.

Before we move on to next section, it is good to know that you can retrieve the bandwidth used to compute the kde layer by using the code chunk below.

```{r}
bw <- bw.diggle(childcareSG_ppp)
bw
```

#### 4.6.1.2 Rescalling KDE values

In the code chunk below, *rescale.ppp()* is used to covert the unit of measurement from meter to kilometer.

```{r}
childcareSG_ppp.km <- rescale.ppp(childcareSG_ppp, 1000, "km")
```

Now, we can re-run *density()* using the resale data set and plot the output kde map.

```{r}
kde_childcareSG.bw <- density(childcareSG_ppp.km, sigma = bw.diggle, edge = TRUE, kernel = "gaussian")

```

```{r}
plot(kde_childcareSG.bw)
```

Notice that output image looks identical to the earlier version, the only changes in the data values (refer to the legend).

### **4.6.2 Working with different automatic badwidth methods**

Beside *bw.diggle()*, there are three other **spatstat** functions can be used to determine the bandwidth, they are: *bw.CvL()*, *bw.scott()*, and *bw.ppl()*.

Let us take a look at the bandwidth returned by these automatic bandwidth calculation methods by using the code chunk below.

```{r}
bw.CvL(childcareSG_ppp.km)
```

```{r}
bw.scott(childcareSG_ppp.km)
```

```{r}
bw.ppl(childcareSG_ppp.km)
```

```{r}
bw.diggle(childcareSG_ppp.km)
```

Baddeley et. (2016) suggested the use of the *bw.ppl()* algorithm because in ther experience it tends to produce the more appropriate values when the pattern consists predominantly of tight clusters. But they also insist that if the purpose of once study is to detect a single tight cluster in the midst of random noise then the *bw.diggle()* method seems to work best.

The code chunk beow will be used to compare the output of using *bw.diggle* and *bw.ppl* methods.

```{r}
kde_childcareSG.ppl <- density(childcareSG_ppp.km, sigma = bw.ppl, edge = TRUE, kernel = "gaussian")

par(mfrow = c(1,2), mar = c(1, 1, 1, 1))
plot(kde_childcareSG.bw, main = "bw.diggle")
plot(kde_childcareSG.ppl, main = "bw.ppl")
```

### **4.6.3 Working with different kernel methods**

By default, the kernel method used in *density.ppp()* is *gaussian*. But there are three other options, namely: Epanechnikov, Quartic and Dics.

The code chunk below will be used to compute three more kernel density estimations by using these three kernel function.

```{r}
par(mfrow = c(2,2), mar = c(1, 1, 1, 1))

plot(density(childcareSG_ppp.km, 
             sigma = bw.ppl, 
             edge = TRUE,
             kernel = "gaussian"), 
     main = "Gaussian")

plot(density(childcareSG_ppp.km,
             sigma = bw.ppl,
             edge = TRUE,
             kernel = "epanechnikov"), 
     main = "Epanechnikov")

plot(density(childcareSG_ppp.km, 
             sigma = bw.ppl, 
             edge = TRUE, 
             kernel = "quartic"), 
     main = "Quartic")

plot(density(childcareSG_ppp.km, 
             sigma = bw.ppl, 
             edge = TRUE, 
             kernel = "disc"), 
     main = "Disc")
```

## **4.7 Fixed and Adaptive KDE**

### **4.7.1 Computing KDE by using fixed bandwidth**

Next, we will compute a KDE layer by defining a bandwidth of 600 meter. Notice that in the code chunk below, the sigma value used is 0.6. This is because the unit of measurement of ***childcareSG_ppp.km*** object is in kilometer, hence the 600m is 0.6km.

```{r}
kde_childcareSG_600 <- density(childcareSG_ppp.km, sigma = 0.6, edge = TRUE, kernel = "gaussian")

plot(kde_childcareSG_600)
```

### **4.7.2 Computing KDE by using adaptive bandwidth**

Fixed bandwidth method is very sensitive to highly skew distribution of spatial point patterns over geographical units for example urban versus rural. One way to overcome this problem is by using adaptive bandwidth instead.

In this section, we derive adaptive kernel density estimation.

```{r}
kde_childcareSG_adaptive <- adaptive.density(childcareSG_ppp.km, method = "kernel")

plot(kde_childcareSG_adaptive)
```

We can compare the fixed and adaptive kernel density estimation outputs by using the code chunk below.

```{r}
par(mfrow = c(1,2), mar = c(1, 1, 1, 1))

plot(kde_childcareSG.bw, main = "Fixed bandwidth")
plot(kde_childcareSG_adaptive, main = "Adaptive bandwidth")
```

### **4.7.3 Converting KDE output into grid object.**

We convert the KDE output so that it is suitable for mapping purposes

```{r}
gridded_kde_childcareSG_bw <- as(kde_childcareSG.bw, "SpatialGridDataFrame")

spplot(gridded_kde_childcareSG_bw)
```

#### 4.7.3.1 Converting gridded output into raster

Next, we will convert the gridded kernal density objects into RasterLayer object by using *raster()* of **raster** package.

```{r}
kde_childcareSG_bw_raster <- raster(kde_childcareSG.bw)
```

Let us take a look at the properties of kde_childcareSG_bw_raster RasterLayer.

```{r}
kde_childcareSG_bw_raster
```

Notice that the crs property is NA.

#### 4.7.3.2 Assigning projection systems

The code chunk below will be used to include the CRS information on kde_childcareSG_bw_raster RasterLayer.

```{r}
projection(kde_childcareSG_bw_raster) <- CRS("+init=EPSG:3414")

kde_childcareSG_bw_raster
```

### **4.7.4 Visualising the output in tmap**

Finally, we will display the raster in cartographic quality map using **tmap** package.

```{r}
tm_shape(kde_childcareSG_bw_raster) +
  tm_raster("layer", palette = "viridis") +
  tm_layout(legend.position = c("right", "bottom"), frame = FALSE)

```

Notice that the raster values are encoded explicitly onto the raster pixel using the values in “values” field.

### **4.7.5 Comparing Spatial Point Patterns using KDE**

In this section, you will learn how to compare KDE of childcare at Ponggol, Tampines, Chua Chu Kang and Jurong West planning areas.

#### 4.7.5.1 Extracting study area

The code chunk below will be used to extract the target planning areas.

```{r}
pg <- mpsz_sf %>% filter(PLN_AREA_N == "PUNGGOL")
tm <- mpsz_sf %>% filter(PLN_AREA_N == "TAMPINES")
ck <- mpsz_sf %>% filter(PLN_AREA_N == "CHOA CHU KANG")
jw <- mpsz_sf %>% filter(PLN_AREA_N == "JURONG WEST")
```

Plotting target planning areas

```{r}
par(mfrow = c(2,2))
plot(pg, main = "Ponggol")
```

```{r}
plot(tm, main = "Tampines")
```

```{r}
plot(ck, main = "Choa Chu Kang")

```

```{r}
plot(jw, main = "Jurong West")
```

#### 4.7.5.2 Creating ***owin*** object

Now, we will convert these sf objects into owin objects that are required by **spatstat**.

```{r}
pg_owin = as.owin(pg)
tm_owin = as.owin(tm)
ck_owin = as.owin(ck)
jw_owin = as.owin(jw)
```

#### 4.7.5.3 Combining childcare points and the study area

By using the code chunk below, we are able to extract childcare that is within the specific region to do our analysis later on.

```{r}
childcare_pg_ppp = childcare_ppp_jit[pg_owin]
childcare_tm_ppp = childcare_ppp_jit[tm_owin]
childcare_ck_ppp = childcare_ppp_jit[ck_owin]
childcare_jw_ppp = childcare_ppp_jit[jw_owin]
```

Next, *rescale.ppp()* function is used to trasnform the unit of measurement from metre to kilometre.

```{r}
childcare_pg_ppp.km = rescale.ppp(childcare_pg_ppp, 1000, "km")
childcare_tm_ppp.km = rescale.ppp(childcare_tm_ppp, 1000, "km")
childcare_ck_ppp.km = rescale.ppp(childcare_ck_ppp, 1000, "km")
childcare_jw_ppp.km = rescale.ppp(childcare_jw_ppp, 1000, "km")
```

The code chunk below is used to plot these four study areas and the locations of the childcare centres.

```{r}
par(mfrow = c(2,2), mar = c(1, 1, 1, 1))

plot(childcare_pg_ppp.km, main = "Punggol")
plot(childcare_tm_ppp.km, main = "Tampines")
plot(childcare_ck_ppp.km, main = "Choa Chu Kang")
plot(childcare_jw_ppp.km, main = "Jurong West")
```

#### 4.7.5.4 Computing KDE

The code chunk below will be used to compute the KDE of these four planning area. ***bw.diggle*** method is used to derive the bandwidth of each.

```{r}
par(mfrow = c(2,2), mar = c(1, 1, 1, 1))

plot(density(childcare_pg_ppp.km, 
             sigma = bw.diggle, 
             edge = TRUE, 
             kernel = "gaussian"),
     main = "Punggol")

plot(density(childcare_tm_ppp.km, 
             sigma = bw.diggle, 
             edge = TRUE, 
             kernel = "gaussian"),
     main = "Tempines")

plot(density(childcare_ck_ppp.km, 
             sigma = bw.diggle, 
             edge = TRUE, 
             kernel = "gaussian"),
     main = "Choa Chu Kang")

plot(density(childcare_jw_ppp.km, 
             sigma = bw.diggle, 
             edge = TRUE, 
             kernel = "gaussian"),
     main = "JUrong West")
```

#### 4.7.5.5 Computing fixed bandwidth KDE

For comparison purposes, we will use 250m as the bandwidth.

```{r}
par(mfrow = c(2,2), mar = c(1, 1, 1, 1))

plot(density(childcare_ck_ppp.km, 
             sigma = 0.25, 
             edge = TRUE, 
             kernel = "gaussian"),
     main = "Choa Chu Kang")

plot(density(childcare_jw_ppp.km, 
             sigma = 0.25, 
             edge = TRUE, 
             kernel = "gaussian"),
     main = "Jurong West")

plot(density(childcare_pg_ppp.km, 
             sigma = 0.25, 
             edge = TRUE, 
             kernel = "gaussian"),
     main = "Punggol")

plot(density(childcare_tm_ppp.km, 
             sigma = 0.25, 
             edge = TRUE, 
             kernel = "gaussian"),
     main = "Tampines")
```

## **4.8 Nearest Neighbour Analysis**

In this section, we will perform the Clark-Evans test of aggregation for a spatial point pattern by using [*clarkevans.test()*](https://www.rdocumentation.org/packages/spatstat/versions/1.63-3/topics/clarkevans.test) of **statspat**.

The test hypotheses are:

Ho = The distribution of childcare services are randomly distributed.

H1= The distribution of childcare services are not randomly distributed.

The 95% confident interval will be used.

### **4.8.1 Testing spatial point patterns using Clark and Evans Test**

```{r}
clarkevans.test(childcareSG_ppp, 
                correction = "none", 
                clipregion = "sg_owin", 
                alternative = "clustered", 
                nsim = 99)
```

The p-value is extremely small. There is sufficient evidence to reject the null hypothesis that the distribution of childcare services is random. We conclude that childcare services are distributed in a clustered point pattern.

### **4.8.2 Clark and Evans Test: Choa Chu Kang planning area**

In the code chunk below, [*clarkevans.test()*](https://rdrr.io/cran/spatstat/man/clarkevans.test.html) of **spatstat** is used to performs Clark-Evans test of aggregation for childcare centres in Choa Chu Kang planning area.

```{r}
clarkevans.test(childcare_ck_ppp,
                correction = "none",
                clipregion = "ck_owin",
                alternative = c("two.sided"),
                nsim = 999)
```

The p-value is extremely large. There is insufficient evidence to reject the null hypothesis that the distribution of childcare services is random in Choa Chu Kang.

### **4.8.3 Clark and Evans Test: Tampines planning area**

In the code chunk below, the similar test is used to analyse the spatial point patterns of childcare centre in Tampines planning area.

```{r}
clarkevans.test(childcare_tm_ppp,
                correction = "none",
                clipregion = "tm_owin",
                alternative = c("two.sided"),
                nsim = 999)
```

The p-value is extremely small. There is sufficent evidence to reject the null hypothesis and conclude that the distribution of childcare services is not random in Tampines.

# **5  2nd Order Spatial Point Patterns Analysis Methods**

The next section of this hands-on exercise is based on Chapter 5 of R for Geospatial Data Science and Analytics, beginning at Section 7.

## **5.7 Analysing Spatial Point Process Using G-Function**

The G function measures the distribution of the distances from an arbitrary event to its nearest event. In this section, we learn how to compute G-function estimation by using [*Gest()*](https://rdrr.io/cran/spatstat/man/Gest.html) of **spatstat** package. We will also learn how to perform monta carlo simulation test using [*envelope()*](https://rdrr.io/cran/spatstat/man/envelope.html) of **spatstat** package.

### **5.7.1 Choa Chu Kang planning area**

#### 5.7.1.1 Computing G-function estimation

The code chunk below is used to compute G-function using *Gest()* of **spatat** package.

```{r}

G_CK = Gest(childcare_ck_ppp, correction = "border")

plot(G_CK, xlim = c(0, 500))
```

#### 5.7.1.2 Performing Complete Spatial Randomness Test

To confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypotheses and test are as follows:

Ho = The distribution of childcare services at Choa Chu Kang are randomly distributed.

H1= The distribution of childcare services at Choa Chu Kang are not randomly distributed.

The null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.

Monte Carlo test with G-function

```{r}
G_CK.csr <- envelope(childcare_ck_ppp, Gest, nsim = 999)
```

```{r}
plot(G_CK.csr)
```

Since the estimated G(r) lies between the upper and lower envelopes, there is insufficient evidence to reject the null hypothesis that the distribution of childcare services at Choa Chu Kang is random.

### **5.7.2 Tampines planning area**

#### 5.7.2.1 Computing G-function estimation

```{r}
G_tm <- Gest(childcare_tm_ppp, correction = "best")

plot(G_tm)
```

#### 5.7.2.2 Performing Complete Spatial Randomness Test

To confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypotheses and test are as follows:

Ho = The distribution of childcare services at Tampines are randomly distributed.

H1= The distribution of childcare services at Tampines are not randomly distributed.

The null hypothesis will be rejected is p-value is smaller than alpha value of 0.001.

The code chunk below is used to perform the hypothesis testing.

```{r}
G_tm.csr <- envelope(childcare_tm_ppp, Gest, correction = "all", nsim = 999)
```

```{r}
plot(G_tm.csr)
```

The estimated G(r) lies between the upper and lower envelopes for most distances except for a very small range. There is insufficient evidence to reject the null hypothesis that the distribution of childcare services at Tampines is random.

## **5.8 Analysing Spatial Point Process Using F-Function**

The F function estimates the empty space function F(r) or its hazard rate h(r) from a point pattern in a window of arbitrary shape. In this section, you will learn how to compute F-function estimation by using [*Fest()*](https://rdrr.io/cran/spatstat/man/Fest.html) of **spatstat** package. You will also learn how to perform monte carlo simulation test using [*envelope()*](https://rdrr.io/cran/spatstat/man/envelope.html) of **spatstat** package.

### **5.8.1 Choa Chu Kang planning area**

#### 5.8.1.1 Computing F-function estimation

The code chunk below is used to compute F-function using *Fest()* of **spatat** package.

```{r}
F_CK = Fest(childcare_ck_ppp)

plot(F_CK)
```

### **5.8.2 Performing Complete Spatial Randomness Test**

To confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:

Ho = The distribution of childcare services at Choa Chu Kang are randomly distributed.

H1= The distribution of childcare services at Choa Chu Kang are not randomly distributed.

The null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.

Monte Carlo test with F-fucntion

```{r}
F_CK.csr <- envelope(childcare_ck_ppp, Fest, nsim = 999)
```

```{r}
plot(F_CK.csr)
```

Estimated F(r) lies between the upper and lower envelopes . There is insufficient evidence to reject the null hypothesis. We conclude that the distribution of childcare services at Choa Chu Kang is random.

### **5.8.3 Tampines planning area**

#### 5.8.3.1 Computing F-function estimation

Monte Carlo test with F-fucntion

```{r}
F_tm = Fest(childcare_tm_ppp, correction = "best")

plot(F_tm)
```

#### 5.8.3.2 Performing Complete Spatial Randomness Test

To confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypotheses and test are as follows:

Ho = The distribution of childcare services at Tampines are randomly distributed.

H1= The distribution of childcare services at Tampines are not randomly distributed.

The null hypothesis will be rejected is p-value is smaller than alpha value of 0.001.

The code chunk below is used to perform the hypothesis testing.

```{r}
F_tm.csr <- envelope(childcare_tm_ppp, Fest, correction = "all", nsim = 999)
```

```{r}
plot(F_tm.csr)
```

Estimated F(r) lies below the lower envelope for distances above 350m, suggesting that the distribution of childcare services at Tampines is clustered.

## **5.9 Analysing Spatial Point Process Using K-Function**

K-function measures the number of events found up to a given distance of any particular event. In this section, you will learn how to compute K-function estimates by using [*Kest()*](https://rdrr.io/cran/spatstat/man/Kest.html) of **spatstat** package. You will also learn how to perform monta carlo simulation test using *envelope()* of spatstat package.

### **5.9.1 Choa Chu Kang planning area**

#### 5.9.1.1 Computing K-function estimate

```{r}
K_ck = Kest(childcare_ck_ppp, correction = "Ripley")
plot(K_ck, ylab= "K(r)", xlab = "r(m)")
```

#### 5.9.1.2 Performing Complete Spatial Randomness Test

To confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypotheses and test are as follows:

Ho = The distribution of childcare services at Choa Chu Kang are randomly distributed.

H1= The distribution of childcare services at Choa Chu Kang are not randomly distributed.

The null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.

The code chunk below is used to perform the hypothesis testing.

```{r}
K_ck.csr <- envelope(childcare_ck_ppp, Kest, nsim = 999, nrank = 1, global = TRUE)

```

```{r}
plot(K_ck.csr, xlab="r", ylab="K(d)")
```

The estimated K(r) lies between the upper and lower envelopes. There is insufficient evidence to reject the null hypothesis. We conclude that the distribution of childcare services at Choa Chu Kang is random.

### **5.9.2 Tampines planning area**

#### 5.9.2.1 Computing K-function estimation

```{r}
K_tm = Kest(childcare_tm_ppp, correction = "Ripley")

plot(K_tm, ylab= "K(r)", xlab = "r(m)", xlim = c(0,1000))
```

#### 5.9.2.2 Performing Complete Spatial Randomness Test

To confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:

Ho = The distribution of childcare services at Tampines are randomly distributed.

H1= The distribution of childcare services at Tampines are not randomly distributed.

The null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.

The code chunk below is used to perform the hypothesis testing.{r}

```{r}
K_tm.csr <- envelope(childcare_tm_ppp, Kest, nsim = 999, nrank = 1, global = TRUE)
```

```{r}
plot(K_tm.csr, xlab = "r", ylab = "K(r)", xlim = c(0,500))
```

The estimated K(r) lies above the upper envelope. There is sufficient evidence to reject the null hypothesis and conclude that the distribution of childcare services at Tampines is non-random. Since the estimated K(r) lies above the upper envelope, there is a significant cluster pattern.

## **5.10 Analysing Spatial Point Process Using L-Function**

In this section, you will learn how to compute L-function estimation by using [*Lest()*](https://rdrr.io/cran/spatstat/man/Lest.html) of **spatstat** package. You will also learn how to perform monte carlo simulation test using *envelope()* of spatstat package.

### **5.10.1 Choa Chu Kang planning area**

#### 5.10.1.1 Computing modified L Function estimation

```{r}
L_ck = Lest(childcare_ck_ppp, correction = "Ripley")

plot(L_ck, .-r ~ r, ylab= "L(r) - r", xlab = "r(m)")
```

#### 5.10.1.2 Performing Complete Spatial Randomness Test

To confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:

Ho = The distribution of childcare services at Choa Chu Kang are randomly distributed.

H1= The distribution of childcare services at Choa Chu Kang are not randomly distributed.

The null hypothesis will be rejected if p-value if smaller than alpha value of 0.001.

The code chunk below is used to perform the hypothesis testing.

```{r}
L_ck.csr <- envelope(childcare_ck_ppp, Lest, nsim = 999, rank = 1, global = TRUE)

```

```{r}
plot(L_ck.csr, . - r ~ r, xlab = "r", ylab = "L(r)-r")

```

The estimated L(r) lies between the upper and lower envelopes. There is insufficient evidence to reject the null hypothesis. Again, we conclude that the distribution of childcare services at Choa Chu Kang is random.

### **5.10.2 Tampines planning area**

#### 5.10.2.1 Computing L-function estimate

```{r}
L_tm = Lest(childcare_tm_ppp, correction = "Ripley")

plot(L_tm, . -r ~ r, ylab= "L(r)-r", xlab = "r(m)", xlim = c(0,1000))
```

#### 5.10.2.2 Performing Complete Spatial Randomness Test

To confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:

Ho = The distribution of childcare services at Tampines are randomly distributed.

H1= The distribution of childcare services at Tampines are not randomly distributed.

The null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.

The code chunk below will be used to perform the hypothesis testing.

```{r}
L_tm.csr <- envelope(childcare_tm_ppp, Lest, nsim = 999, nrank = 1, global = TRUE)

```

Then, plot the model output by using the code chunk below.

```{r}
plot(L_tm.csr, . - r ~ r, xlab = "r", ylab = "L(r)-r", xlim = c(0,500))
```

The estimated L(r) lies above the upper envelope. There is sufficient evidence to reject the null hypothesis and conclude that the distribution of childcare services in Tampines is non-random. Since L(r) \>0, this indicates that the observed distribution is geographically concentrated.
