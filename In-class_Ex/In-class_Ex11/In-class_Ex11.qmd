---
title: "In-Class Exercise 11"
author: "Immanuel Leong"
date: "November 4, 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  warning: false
  freeze: true
---

### Loading the R package

```{r}
pacman::p_load(tidyverse, sf, tmap, httr, performance)
```

### Importing data

The code chunk below imports multiple csv files in a specified folder and appends them into a single tibble data frame.

```{r}
folder_path <- "data/aspatial"

file_list <- list.files(path = folder_path,
                        pattern = "^realis.*\\.csv$",
                        full.names = TRUE)

realis_data <- file_list %>%
  map_dfr(read_csv)
```

### Wrangling data

```{r}

condo_resale <- realis_data %>%
  mutate(`Sale Date` = dmy(`Sale Date`)) %>%
  filter(`Type of Sale` == "Resale" &
           `Property Type` == "Condominium")
```

### Geocoding

```{r}
postcode <- unique(condo_resale$`Postal Code`)
```

```{r}

url <- "https://onemap.gov.sg/api/common/elastic/search"

found <- data.frame()

not_found <- data.frame()

for (postcode in postcode) {
  
  query <- list('searchVal' = postcode, 'returnGeom' = 'Y',
                'getAddrDetails' = 'Y', 'pageNum' = '1')

  res <- GET(url, query = query)
  
  if (content(res)$found != 0) {
    found <- rbind(found, data.frame(content(res))[4:13])
  }
  else {not_found = data.frame(postcode)}
}

```

### Tidying field names

```{r}
found <- found %>%
  select(c(6:8)) %>%
  rename(POSTAL = `results.POSTAL`,
         XCOORD = `results.X`,
         YCOORD = `results.Y`)
```

### Joining tables

```{r}
condo_resale_geocoded = left_join(
  condo_resale, found,
  by = c('Postal Code' = 'POSTAL'))
```

### Converting to sf

```{r}
condo_resale_sf <- st_as_sf(condo_resale_geocoded,
                            coords = c("XCOORD", "YCOORD"),
                            crs = 3414)
```

### Cleaning Spatial Data

```{r}

# Checking for ovrlapping point features

overlapping_points <- condo_resale_sf %>%
  mutate(overlap = lengths(st_equals(., .)) > 1)

overlapping_points
```

In the code chunk below, st_jitter() of sf package is used to move the point features by 5m to avoid overlapping point features

```{r}
condo_resale_sf <- condo_resale_sf %>%
  st_jitter(amount = 2)
```

### Revisiting Take-Home Exercise 2

To avoid centroids being affected by outlying islands, we must do the following

Split the multipolygons into individual polygons using st_cast()

```{r}
#| eval: false

sf_polygon <- prov_sf %>%
  st_cast("POLYGON") %>%
  mutate(area = st_area(.))
```

-   Group provinces by their unique name

-   Select the largest polygon by area

```{r}
#| eval: false

prov_cleaned <- sf_polygon %>%
  group_by(ADM1_EN) %>%
  filter(area == max(area)) %>%
  ungroup() %>%
  select(-area) %>%
  select(ADM1_EN)
```

-   Ensure that ADM1_EN values are consistent between the two tables that you want to join

```{r}
#| eval: false

drug_cleaned <- drug %>%
  mutate(AMD1_EN = case_when(
    ADM1_EN == "buogkan" ~ "Bueng Kan",
    ADM1_EN == "Loburi" ~ "Lop Buri",
    TRUE ~ ADM1_EN
  ))
```
