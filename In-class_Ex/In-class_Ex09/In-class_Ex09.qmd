---
title: "In-Class Exercise 9"
author: "Immanuel Leong"
date: "October 21, 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  warning: false
  freeze: true
---

### Loading R packages

```{r}
pacman::p_load(spdep, sp, tmap, sf, ClustGeo, cluster, factoextra, NbClust, tidyverse, GGally)
```

### Importing the data

```{r}
shan_sf <- read_rds("data/rds/shan_sf.rds")

shan_ict <- read_rds("data/rds/shan_ict.rds")
```

### Conventional Hierarchical Clustering

#### Hierarchical clustering

```{r}
proxmat <- dist(shan_ict, method = "euclidean") 

# can select which clustering variables to use, have to change first argument accordingly

hclust_ward <- hclust(proxmat, method = "ward.D")

# hclust_ward is a hierarchical cluster object (only then can argument k be used in cutree)

groups <- as.factor(cutree(hclust_ward, k = 6))
```

#### Append to the geospatial data

```{r}
shan_sf_cluster <- cbind(shan_sf, as.matrix(groups)) %>%
  rename(`CLUSTER` = `as.matrix.groups.`) %>%
  select(-c(3:4, 7:9)) %>%
  rename(TS = TS.x)
```

#### Dendrogram

```{r}
plot(hclust_ward, cex = 0.6)

rect.hclust(hclust_ward, k = 6, border = 2:5)
```

#### Cluster map

```{r}
#| fig-height: 7
#| fig-width: 12

qtm(shan_sf_cluster, "CLUSTER")

# qtm is useful for mapping categorical variables (vs numerical variables, where control of classification methods is more important; colour scheme limited to 16 default)
```

## Spatially Constrained Clustering

## SKATER method (hard classification)

### Step 1: Computing nearest neighbours

```{r}

shan.nb <- poly2nb(shan_sf)

# Notice that we can use shan_sf directly in poly2nb() without converting it into an sp object first. Latest version of spdep package allows most functions to accept sf objects directly.

summary(shan.nb)

```

### Step 2: Visualising the neighbours

```{r}
plot(st_geometry(shan_sf),
     border = grey(.5))

pts <- st_coordinates(st_centroid(shan_sf))

plot(shan.nb, pts, col = "blue", add = TRUE)
```

### Step 3: Computing minimum spanning tree

```{r}
# Calculating edge costs

lcosts <- nbcosts(shan.nb, shan_ict)

# Incorporating these costs into a weights object (style must be B)

shan.w <- nb2listw(shan.nb, lcosts, style = "B")

summary(shan.w)
```

```{r}
# Computing MST

shan.mst <- mstree(shan.w)

# Visualising MST

plot(st_geometry(shan_sf), border = gray(.5))

plot.mst(shan.mst, pts, col = "blue", cex.lab = 0.7, cex.circles = 0.005, add = TRUE)
```

### Computing spatially constrained clusters

```{r}
skater.clust6 <- skater(edges = shan.mst[, 1:2],
                        data = shan_ict,
                        method = "euclidean",
                        ncuts = 5)
```

```{r}
# Plot skater tree

plot(st_geometry(shan_sf),
     border = gray(.5))

plot(skater.clust6,
     pts,
     cex.lab = .7,
     groups.colors = c("red", "green", "blue", "brown", "pink"),
     cex.circles = 0.005,
     add = TRUE)
```

### Visualising the clusters in choropleth map

```{r}
groups_mat <- as.matrix(skater.clust6$groups)

shan_sf_spatialcluster <- cbind(shan_sf_cluster, as.factor(groups_mat)) %>%
  rename(`skater_CLUSTER` = `as.factor.groups_mat.`)

qtm(shan_sf_spatialcluster, "skater_CLUSTER")

# use as.factor to ensure that clusters are arranged on an ordinal scale OR alphabetically
```

## ClustGeo method (soft classification)

Soft classification: allows user to decide relative importance of attribute/spatial distance (D0/D1). By default, uses cut-off value where D0 and D1 are closest.

If user wants to emphasise spatial distance, choose cut-off value where D1is higher.

If user wants to emphasise attribute distance, choose cut-off value where D0 is higher.

Computing spatial distance matrix

Use st_distance() of sf to compute the distance matrix

```{r}
dist <- st_distance(shan_sf, shan_sf)
distmat <- as.dist(dist)
```

Create cluster graphs

```{r}
cr <- choicealpha(proxmat, distmat, range.alpha = seq(0, 1, 0.1), K = 6, graph = TRUE)

# Use first graph (not the standardised one)
```

Saving clustGeo output

```{r}
clustG <- hclustgeo(proxmat, distmat, alpha = 0.2)
# value of alpha is cut-off point based on cluster graph above


groups <- as.factor(cutree(clustG, k = 6))

shan_sf_clustGeo <- cbind(shan_sf, as.matrix(groups)) %>%
  rename(`clustGeo` = `as.matrix.groups.`)
```

### Visualising the clusters in choropleth map

```{r}
qtm(shan_sf_clustGeo, "clustGeo")
```

### Characterising the clusters

```{r}
ggparcoord(data = shan_sf_clustGeo,
           columns = c(17:21),
           scale = "globalminmax",
           alphaLines = 0.2,
           boxplot = TRUE,
           title = "Multiple Parallel Coordinates Plots of ICT Variables by Cluster") +
  facet_grid(~ clustGeo) +
  theme(axis.text.x = element_text(angle = 30, size = 4))
```

## Comparing cluster maps

```{r}

qtm(shan_sf_cluster, "CLUSTER")

qtm(shan_sf_spatialcluster, "skater_CLUSTER")

qtm(shan_sf_clustGeo, "clustGeo")

```
