---
title: "In-class Exercise 5"
author: "Immanuel Leong"
date: "September 16, 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  warning: false
  freeze: true
---

# In-class Exercise 5

## Loading the packages

Load sf, spdep, tmap, tidyverse, knitr and GWmodel.

```{r}
pacman::p_load(sf, spdep, tmap, tidyverse, knitr, GWmodel)
```

## Preparing the data

Import the Hunan shapefile and parse it into sf polygon feature object

```{r}
#| eval: false
hunan_sf <- st_read(dsn = "data/geospatial", layer = "Hunan")
```

Import Hunan_2012.csv

```{r}
#| eval: false

hunan2012 <- read_csv("data/aspatial/Hunan_2012.csv")

class(hunan2012)
```

Join the two data sets. The two data sets are joined on "County". Examine the data sets first to ensure that the county names in both are consistent (note that R is case-sensitive)

```{r}
#| eval: false

# The code chunk is displayed, but is not run

hunan_sf <- left_join(hunan_sf, hunan2012) %>%
  select(1:3, 7, 15, 16, 31, 32)

```

```{r}
#| eval: false
write_rds(hunan_sf, "data/rds/hunan_sf.rds")
```

```{r}
#| echo: false

# The code chunk is not displayed but is still run.

hunan_sf <- read_rds("data/rds/hunan_sf.rds")
```

## Converting to SpatialPolygonDataFrame

Note: GWmodel is built around sp and not sf formats.

```{r}
hunan_sp <- hunan_sf %>%
  as_Spatial()
```

## Geographically Weighted Summary Statistics with adaptive bandwidth

Determine adaptive bandwidth

```{r}
# Method 1: Cross-validation

bw_CV <- bw.gwr(GDPPC ~ 1,
                 data = hunan_sp,
                 approach = "CV",
                 adaptive = TRUE,
                 kernel = "bisquare",
                 longlat = T)

```

```{r}
# Method 2: AIC

bw_AIC <- bw.gwr(GDPPC ~ 1,
                 data = hunan_sp,
                 approach = "AIC",
                 adaptive = TRUE,
                 kernel = "bisquare",
                 longlat = T)

# longlat = TRUE shows that coordinates are in latitude/longitude format - R will transform it to projected coordinate system, end unit will be km
```

Compute geographically weighted summary statistics

```{r}
gwstat <- gwss(data = hunan_sp,
               vars = "GDPPC",
               bw = bw_AIC,
               kernel = "bisquare",
               adaptive = TRUE,
               longlat = T)
```

LM: local mean

LSD: local standard deviation

LV: local variance

LSKe: local skewness

LCV: local coefficient of variation

Local means: 22 closest neighbours (and itself)

### Preparing output data

Extract SDF data table from gwss object output and convert into data.frame.

```{r}
gwstat_df <- as.data.frame(gwstat$SDF)
```

cbind() is used to append the newly derived data.frame onto hunan_sf.

Note: cbind() assumes that order of observations is the same in both dataframes. Does not work if either has been sorted.

```{r}
hunan_gstat <- cbind(hunan_sf, gwstat_df)
```

### Visualising geographically weighted summary statistics

Geographically weighted mean

```{r}
#| fig-width: 12
#| fig-height: 10


tm_shape(hunan_gstat) +
  tm_fill("GDPPC_LM", n = 5, style = "quantile") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Distribution of geograpically weighted mean",
            main.title.position = "center",
            main.title.size = 2.0,
            legend.text.size = 1.2,
            legend.height = 1.50,
            legend.width = 1.50,
            frame = TRUE
            )
```

## Geographically Weighted Summary Statistics with fixed bandwidth

```{r}
# Method 1: Cross-validation

bw_CV <- bw.gwr(GDPPC ~ 1,
                 data = hunan_sp,
                 approach = "CV",
                 adaptive = FALSE,
                 kernel = "bisquare",
                 longlat = T)

```

```{r}
# Method 2: AIC

bw_AIC <- bw.gwr(GDPPC ~ 1,
                 data = hunan_sp,
                 approach = "AIC",
                 adaptive = FALSE,
                 kernel = "bisquare",
                 longlat = T)
```
