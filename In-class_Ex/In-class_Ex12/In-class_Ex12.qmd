---
title: "In-Class Exercise 12"
author: "Immanuel Leong"
date: "November 11, 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  warning: false
  freeze: true
---

### Getting started

```{r}
pacman::p_load(sf, spdep, GWmodel, SpatialML, tmap, rsample, yardstick, tidyverse, knitr, kableExtra, spatialRF)
```

### Preparing data

#### Data import

```{r}

mdata <- read_rds("data/rds/mdata.rds")
```

#### Data sampling

Calibrating predictive models is computationally intensive, especially when random forest method is used. For quick prototyping, a 10% sample will be selected at random from the data by using the code chunk below.

```{r}
set.seed(1234)

HDB_sample <- mdata %>%
  sample_n(1500)
```

#### Checking for overlapping points

The code chunk below is used to check if there are overlapping point features.

```{r}
overlapping_points <- HDB_sample %>%
  mutate(overlap = lengths(st_equals(., .)) > 1)

summary(overlapping_points$overlap)
```

#### Spatial jitter

In the code chunk below, st_jitter() of sf is used to move the point features by 5m to avoid overlapping point features.

```{r}
HDB_sample <- HDB_sample %>%
  st_jitter(amount = 5)
```

### Data sampling

The entire data are split into training and test data sets with 65% and 35% respectively using initial_split of rsample.

```{r}
set.seed(1234)

resale_split <- initial_split(HDB_sample, prop = 6.67/10)

train_data <- training(resale_split)
test_data <- testing(resale_split)
```

It is always good practice to save the training and test data sets for subsequent use.

```{r}
write_rds(train_data, "data/rds/train_data.rds")
write_rds(test_data, "data/rds/test_data.rds")
```

### Multicollinearity check

In order to avoid multicollinearity, in the code chunk below, ggcorrmat() of ggstatsplot is used to plot a correlation matrix to check if there are pairs of highly correlated independent variables.

```{r}
#| fig-width: 15
#| fig-height: 15

mdata_nogeo <- mdata %>%
  st_drop_geometry()

ggstatsplot::ggcorrmat(mdata_nogeo[, 2:17])
```

### Building non-spatial multiple linear regression

```{r}
price_mlr <- lm(resale_price ~ floor_area_sqm +
                  storey_order + remaining_lease_mths +
                  PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +
                  PROX_MRT + PROX_PARK + PROX_MALL + 
                  PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +
                  WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +
                  WITHIN_1KM_PRISCH,
                data = train_data)

summary(price_mlr)
```

### Predictive Modelling with gwr

#### Computing bw

```{r}
gwr_bw_train_ad <- bw.gwr(resale_price ~ floor_area_sqm +
                  storey_order + remaining_lease_mths +
                  PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +
                  PROX_MRT + PROX_PARK + PROX_MALL + 
                  PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +
                  WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +
                  WITHIN_1KM_PRISCH,
                data = train_data,
                approach = "CV",
                kernel = "gaussian",
                adaptive = TRUE,
                longlat = FALSE)

gwr_bw_train_ad
```

#### Model calibration

```{r}
gwr_ad <- gwr.basic(formula = resale_price ~ floor_area_sqm +
                  storey_order + remaining_lease_mths +
                  PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +
                  PROX_MRT + PROX_PARK + PROX_MALL + 
                  PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +
                  WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +
                  WITHIN_1KM_PRISCH,
                data = train_data,
                bw = 20,
                kernel = "gaussian",
                adaptive = TRUE,
                longlat = FALSE)

gwr_ad
```

#### Predicting with test data

```{r}

gwr_pred <- gwr.predict(formula = resale_price ~ floor_area_sqm +
                  storey_order + remaining_lease_mths +
                  PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +
                  PROX_MRT + PROX_PARK + PROX_MALL + 
                  PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +
                  WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +
                  WITHIN_1KM_PRISCH,
                data = train_data,
                predictdata = test_data,
                bw = 20,
                kernel = "gaussian",
                adaptive = TRUE,
                longlat = FALSE)
```

#### Saving predicted values

```{r}
gwr_pred_df <- as.data.frame(gwr_pred$SDF$prediction) %>%
  rename(gwr_pred = "gwr_pred$SDF$prediction")
```

### Predictive Modelling with RF method

#### Data preparation

Firstly, code chunk below is used to extract coordinates of training and test data sets

```{r}
coords <- st_coordinates(HDB_sample)
coords_train <- st_coordinates(train_data)
coords_test <- st_coordinates(test_data)
```

Next, code chunk below is used to drop the geometry column of the training dataset.

```{r}
train_data_nogeom <- train_data %>%
  st_drop_geometry()
```

#### Calibrating RF model

```{r}
set.seed(1234)

rf <- ranger(resale_price ~ floor_area_sqm +
                  storey_order + remaining_lease_mths +
                  PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +
                  PROX_MRT + PROX_PARK + PROX_MALL + 
                  PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +
                  WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +
                  WITHIN_1KM_PRISCH,
                data = train_data_nogeom)

```

#### Model output

```{r}
rf
```

#### Preparing test data

```{r}
test_data_nogeom <- cbind(test_data, coords_test) %>%
  st_drop_geometry()
```

#### Predicting with rf

```{r}
rf_pred <- predict(rf, data = test_data_nogeom)
```

#### Saving the predicted values

The output of predict() is an object of class ranger with elements. Code chunk below is used to extract values from predictions of predicted class and save the values in a data frame.

```{r}
rf_pred_df <- as.data.frame(rf_pred$predictions) %>%
  rename(rf_pred = "rf_pred$predictions")
```

### Predictive Modelling with SpatialML

#### Calibrating with grf

```{r}

set.seed(1234)

grf_ad <- grf(formula = resale_price ~ floor_area_sqm +
                  storey_order + remaining_lease_mths +
                  PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +
                  PROX_MRT + PROX_PARK + PROX_MALL + 
                  PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +
                  WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +
                  WITHIN_1KM_PRISCH,
              dframe = train_data_nogeom,
              bw = 20,
              kernel = "adaptive",
              coords = coords_train)

```

#### Preparing test data

```{r}
test_data_nogeom <- cbind(test_data, coords_test) %>%
  st_drop_geometry()
```

#### Predicting with the test data

In the code chunk below, use predict.grf() of spatialML for predicting resale prices in the rest data set.

```{r}
grf_pred <- predict.grf(grf_ad,
                        test_data_nogeom,
                        x.var.name = "X",
                        y.var.name = "Y",
                        local.w = 1,
                        global.w = 0)
```

#### Saving the predicted values

```{r}
grf_pred_df <- as.data.frame(grf_pred)
```

### Model comparison

#### Combining models' output

```{r}
test_data_pred <- test_data %>%
  select(resale_price) %>%
  cbind(gwr_pred_df) %>%
  cbind(rf_pred_df) %>%
  cbind(grf_pred_df)
```

#### Transposing data

```{r}
test_longer <- test_data_pred %>%
  st_drop_geometry() %>%
  pivot_longer(cols = ends_with("pred"),
               names_to = "model",
               values_to = "predicted")
```

#### Renaming

```{r}
model_labels <- c(
  gwr_pred = "gwr",
  rf_pred = "Random Forest",
  grf_pred = "gwRF")

test_longer <- test_longer %>%
  mutate(model = recode(
    model, !!!model_labels))
```

#### Computing rmse

```{r}
rmse_results <- test_longer %>%
  group_by(model) %>%
  rmse(truth = resale_price,
       estimate = predicted) %>%
  rename(rmse = .estimate) %>%
  select(model, rmse)
```

### Model comparison plots

Bar chart

```{r}
ggplot(rmse_results,
       aes(x = reorder(model, rmse),
           y = rmse,
           fill = "skyblue")) +
  geom_bar(stat = "identity",
           fill = "skyblue",
           color = "black",
           width = 0.7) +
  labs(title = "MSE Comparison of Models",
       y = "RMSE",
       x = "Model") +
  theme_minimal()
```

Scatter plots

```{r}
test_longer <- test_longer %>%
  left_join(rmse_results,
            by = "model")

```

```{r}
ggplot(data = test_longer,
       aes(x = predicted,
           y = resale_price)) +
  facet_wrap(~ model) +
  geom_point() +
  geom_text(data = test_longer,
            aes(x = Inf, y = Inf,
                label = paste("RMSE:", round(rmse, 2))),
            hjust = 1.1, vjust = 1.1,
            color = "black", size = 4)
```

### Variable importance

```{r}
var_imp <- data.frame(
  Variable = names(grf_ad$Global.Model$variable.importance),
  Importance = grf_ad$Global.Model$variable.importance
)
```

```{r}
ggplot(var_imp, aes(x = reorder(Variable, Importance),
                    y = Importance)) +
  geom_bar(stat = "identity",
           fill = "skyblue") +
  coord_flip() +
  labs(
    title = "Variable Importance from Ranger Model",
    x = "Variables",
    y = "Importance"
  ) +
  theme_minimal()
```
