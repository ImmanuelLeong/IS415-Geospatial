---
title: "Take-Home Exercise 3"
author: "Immanuel Leong"
date: "September 20, 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  warning: false
  freeze: true
---

# **Take-home Exercise 3: Prototyping Modules for Geospatial Analytics Shiny Application**

## 1.0 Overview

In this exercise, I prototype the exploratory data analysis module of a Shiny application that allows users to investigate the spatial distribution and temporal trends of armed conflict events in Papua, a region of Indonesia that has been experiencing a protracted military conflict since 1962, between Indonesian security forces and separatist guerrilla groups under the umbrella of the Free Papua Movement.

Our application covers the period from 1 January 2015, shortly after Indonesian President Joko Widodo ("Jokowi") began his first term, to 30 June 2024, towards the end of Jokowi's second term. It thus provides insights into how the Papua conflict has evolved over Jokowi's time in office.

## 2.0 Packages

For this exercise, the following R packages are used:

-   [**tidyverse**](https://cran.r-project.org/web/packages/tidyverse/index.html), a collection of R packages designed for data science, and which provides functions to import, transform, and visualise the data.

-   [**sf**](https://cran.r-project.org/web/packages/sf/index.html), to import, manage and process vector-based geospatial data in R.

-   [**tmap**](https://cran.r-project.org/web/packages/tmap/index.html), which provides functions for plotting cartographic quality static point patterns maps or interactive maps.

-   [**shiny**](https://cran.r-project.org/web/packages/shiny/index.html), which makes it easy to build interactive web applications with R.

All of these packages are supported in R CRAN.

*p_load()* function of pacman package is used to install and load these packages into the R environment.

```{r}

pacman::p_load(tidyverse, sf, tmap, shiny)
```

## 3.0 Data Preparation

For this exercise, we will need to prepare the following data layers:

-   A study area layer in sf polygon feature format, at Indonesia's admin1 (provinsi/province) level.

-   A study area layer in sf polygon feature format, at Indonesia's admin2 (kota & kabupaten/city & regency) level.

-   A point events layer in sf point feature format, showing the location, date and other attributes of armed conflict events in the Papua region.

### 3.1 Preparing the admin1 layer

#### 3.1.1 Importing the data and checking the projection

Import `idn_admbnda_adm1_bps_20200401` as a simple features object, which we name `admin1`. This dataset provides information on Indonesia's admin1 boundaries.

```{r}
admin1 <- st_read(dsn = "data/adminboundaries", layer = "idn_admbnda_adm1_bps_20200401")
```

`admin1` has a total of 34 features, and is projected in WGS 84.

Sometimes, when importing geospatial data into R, the coordinate system of the source data is wrongly assigned during the importing process. We check the CRS.

```{r}
st_crs(admin1)
```

The EPSG code indicated is 4326, which is correct since the data is projected in WGS 84.

#### 3.1.2 Reprojecting the data

In geospatial analytics, it is very common for us to transform the original data from geographic coordinate system to projected coordinate system. This is because geographic coordinate system is not appropriate if the analysis need to use distance or/and area measurements.

In the following code chunk, we reproject `admin1` in the DGN95 / UTM zone 53S project coordinate system, which has EPSG code 23883.

```{r}
admin1_23883 <- st_transform(admin1, crs = 23883)
```

Using the following code chunk, we verify that we have successfully reprojected `admin1` in the the DGN95 / UTM zone 53S coordinate system.

```{r}

st_geometry(admin1_23883)
```

#### 3.1.3 Selecting the study area

As mentioned earlier, our study area is the region of Papua. This currently consists of 6 provinces: Papua Selatan (South Papua), Papua Tengah (Central Papua), Papua Pegunungan (Mountains Papua), Papua Barat Daya (South-West Papua), Papua Barat (West Papua), and Papua.

However, were only created in [2022](https://unstats.un.org/unsd/ungegn/sessions/3rd_session_2023/documents/GEGN.2_2023_50_CRP50.pdf), when they were carved out of the original 2 provinces of Papua and Papua Barat. Since the source data was last modified in [April 2020](https://data.humdata.org/dataset/cod-ab-idn?), this change has not been reflected, and `admin1_23883` only contains the geospatial data for the 2 original provinces in the Papua region, as well as provinces in the rest of Indonesia.

As most of the time period we are studying (1 January 2015 to 30 June 2024) falls before this change, to simplify our analysis, we can use this original data for the entire study period.

Hence, we use the *filter()* function of **dplyr**, part of the **tidyverse**, to extract the data for Papua and Papua Barat, and save it as a new sf data.frame `admin1_study`. The ADM1_EN field of `admin1_23883` contains the name of each province.

```{r}

admin1_study <- admin1_23883 %>%
  filter(ADM1_EN == "Papua" | ADM1_EN == "Papua Barat")

admin1_study
```

As required, `admin1_study` is a sf polygon data.frame. It has 2 features.

We verify that the geometries of both features in `admin1_study` are valid.

```{r}
length(which(st_is_valid(admin1_study) == TRUE))
```

We visualise `admin1_study` using *plot()*. As expected, this depicts the original 2 provinces of Papua and Papua Barat

```{r}
plot(admin1_study)
```

We can now save the `admin1_study` study area layer using the *write_rds()* function of **readr**, part of the **tidyverse**.

```{r}
#| eval: FALSE

write_rds(admin1_study, "data/rds/admin1_study.rds")
```

```{r}
#| echo: FALSE

admin1_study <- read_rds("data/rds/admin1_study.rds")
```

### 3.2 Preparing the admin2 layer

#### 3.2.1 Importing the data and checking the projection

Import `idn_admbnda_adm2_bps_20200401` as a simple features object, which we name `admin2`. This dataset provides information on Indonesia's admin2 boundaries.

```{r}
admin2 <- st_read(dsn = "data/adminboundaries", layer = "idn_admbnda_adm2_bps_20200401")
```

#### 3.2.2 Reprojecting the data

Again, the data is projected in WGS84, and we reproject it in the DGN95 / UTM zone 53S coordinate system.

```{r}
admin2_23883 <- st_transform(admin2, 23883)
```

```{r}
st_geometry(admin2_23883)
```

#### 3.3.3 Selecting the study area

Similar to `admin1_23883`, the ADM1_EN field of `admin2_23883` contains the name of the province that each admin2 subdivision (city or regency) belonged to as of April 2020.

We use the *filter()* function of **dplyr**, part of the **tidyverse**, to extract the data for the admin2 subdivisions that belonged to Papua and Papua Barat, and save it as a new sf data.frame `admin2_study`.

```{r}
admin2_study <- admin2_23883 %>%
  filter(ADM1_EN == "Papua" | ADM1_EN == "Papua Barat")

admin2_study
```

As required, `admin2_study` is a sf polygon data.frame. It has 42 features.

We verify that all the geometries in `admin2_study` are valid.

```{r}
length(which(st_is_valid(admin2_study) == TRUE))
```

We visualise `admin2_study` using *plot()*.

```{r}
plot(admin2_study)
```

We can now save the `admin2_study` study area layer using *write_rds().*

```{r}
#| eval: FALSE

write_rds(admin2_study, "data/rds/admin2_study.rds")
```

```{r}
#| echo: FALSE

admin2_study <- read_rds("data/rds/admin2_study.rds")
```

### 3.3 Preparing the armed conflict point events layer

#### 3.3.1 Importing the data

Lastly, we import `2015-01-01-2024-06-30-Indonesia.csv`. This dataset provides location, date, and other attribute information on 6 types of armed conflict events in Indonesia occurring from 1 January 2015 to 30 June 2024. Since it is in csv format, we use the *read_csv()* function of **readr**, part of the **tidyverse**, to import it, and save it as an object named `points`.

```{r}

points <- read_csv("data/2015-01-01-2024-06-30-Indonesia.csv")

glimpse(points)
```

The longitude and latitude fields capture the x- and y-coordinates of the data points respectively. They appear to be in the WGS 84 geographic coordinate system (in which latitudes range from -90 to 90 and longitudes range from 0 to 360).

We then convert `points` to an sf object.

```{r}
points_sf <- st_as_sf(points, coords = c("longitude","latitude"), crs = 4326)

st_geometry(points_sf)
```

#### 3.3.2 Importing the data

We reproject `points_sf` in the DGN95 / UTM zone 53S coordinate system, and save the reprojected data as a new object `points_23883`.

```{r}
points_23883 <- st_transform(points_sf, crs = 23883)

st_geometry(points_23883)
```

#### 3.3.3 Selecting points in the study area

`points_23883` provides information on armed conflict events throughout Indonesia, and the admin1 field contains the name of the province where each point event took place.

However, unlike the administrative boundaries datasets, the source data here is continually updated. This means that both the original (pre-2022) and new (post-2022) province names are used. We use the *group_by()* and *summarize()* functions of **dplyr** to find all the provinces that are named in `points_23883`, and save them as a data.frame `provinces` .

```{r}
provinces <- points_23883 %>% 
  group_by(admin1) %>%
  summarize()
```

As we can see in `provinces`, the 6 current provinces are all named (Central Papua, Highland Papua, Papua, South Papua, Southwest Papua and West Papua).

We create a vector containing these province names.

```{r}
provincenames <- c("Central Papua", "Highland Papua", "Papua", "South Papua", "Southwest Papua", "West Papua")
```

Next, we use *filter()* to extract only the armed conflict events that take place in these provinces from `points_23883`. In addition, we use *select()*, also part of **dplyr**, to retain only the fields containing the event date, event type, involved parties (actor 1 and actor 2), the province (admin 1) and regency/city (admin2) where the event occurred, the number of fatalities, notes about the event, and the point geometry, for each event.

```{r}
points_study <- points_23883 %>%
  filter(admin1 %in% provincenames) %>%
  select(event_date, event_type, actor1, actor2, admin1, admin2, fatalities, notes, geometry)

points_study
```

There are 2942 features in the `points_study` sf point data.frame, corresponding to 2942 armed conflict point events.

We verify that the geometries of all the point events are valid.

```{r}
length(which(st_is_valid(points_study) == TRUE))
```

We can now save the `points_study` study area layer using *write_rds().*

```{r}
#| eval: FALSE

write_rds(points_study, "data/rds/points_study.rds")
```

```{r}
#| echo: FALSE

points_study <- read_rds("data/rds/points_study.rds")
```

## 4.0 Interactive Point Map

```{r}
tmap_mode("plot")

tm_shape(admin1_study) + 
  tm_polygons() +
    tm_shape(points_study) + 
      tm_dots()
```

## 5.0 Time Series Graph

## 6.0 Shiny UI

### 6.1 Shiny UI for Interactive Point Map

### 6.2 Shiny UI for Time Series Graph
