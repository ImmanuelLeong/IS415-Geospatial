---
title: "Take-Home Exercise 3"
author: "Immanuel Leong"
date: "September 20, 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  warning: false
  freeze: true
---

# **Take-home Exercise 3: Prototyping Modules for Geospatial Analytics Shiny Application**

## 1.0 Overview

In this exercise, I prototype the exploratory data analysis module of a Shiny application that allows users to investigate the spatial distribution and temporal trends of armed conflict events in Papua, a region of Indonesia that has been experiencing a protracted military conflict since 1962, between Indonesian security forces and separatist guerrilla groups under the umbrella of the Free Papua Movement.

Our application covers the period from 1 January 2015, shortly after Indonesian President Joko Widodo ("Jokowi") began his first term, to 30 June 2024, towards the end of Jokowi's second term. It thus provides insights into how the Papua conflict has evolved over Jokowi's time in office.

## 2.0 Packages

For this exercise, the following R packages are used:

-   [**tidyverse**](https://cran.r-project.org/web/packages/tidyverse/index.html), a collection of R packages designed for data science, and which provides functions to import, transform, and visualise the data.

-   [**sf**](https://cran.r-project.org/web/packages/sf/index.html), to import, manage and process vector-based geospatial data in R.

-   [**tmap**](https://cran.r-project.org/web/packages/tmap/index.html), which provides functions for plotting cartographic quality static point patterns maps or interactive maps.

-   [**shiny**](https://cran.r-project.org/web/packages/shiny/index.html), which makes it easy to build interactive web applications with R.

All of these packages are supported in R CRAN.

*p_load()* function of pacman package is used to install and load these packages into the R environment.

```{r}
pacman::p_load(tidyverse, sf, tmap, shiny)
```

## 3.0 Data Preparation

For this exercise, we will need to prepare the following data layers:

-   A study area layer in sf polygon feature format, at Indonesia's admin1 (provinsi/province) level.

-   A study area layer in sf polygon feature format, at Indonesia's admin2 (kota & kabupaten/city & regency) level.

-   A point events layer in sf point feature format, showing the location, date and other attributes of armed conflict events in the Papua region.

### 3.1 Preparing the admin1 and admin2 layers

#### 3.1.1 Importing the data and checking the projection

Import `Batas_Wilayah_KelurahanDesa_10K_AR` as a simple features object, which we name `admin`. This dataset provides information on Indonesia's admin4 (village/desa and kelurahan) administrative boundaries as of 2023.

```{r}
admin <- st_read(dsn = "data/BATAS WILAYAH KELURAHAN-DESA 10K", layer = "Batas_Wilayah_KelurahanDesa_10K_AR")

admin

glimpse(admin)
```

We also observe that `admin` is projected in WGS 84.

Sometimes, when importing geospatial data into R, the coordinate system of the source data is wrongly assigned during the importing process. We check the CRS.

```{r}
st_crs(admin)
```

The EPSG code indicated is 4326, which is correct since the data is projected in WGS 84.

#### 3.1.2 Reprojecting the data

In geospatial analytics, it is very common for us to transform the original data from geographic coordinate system to projected coordinate system. This is because geographic coordinate system is not appropriate if the analysis need to use distance or/and area measurements.

In the following code chunk, we reproject `admin`in the DGN95 / UTM zone 53S project coordinate system, which has EPSG code 23883.

```{r}
admin_23883 <- st_transform(admin, crs = 23883)
```

Using the following code chunk, we verify that we have successfully reprojected `admin` in the the DGN95 / UTM zone 53S coordinate system.

```{r}

st_geometry(admin_23883)
```

#### 3.1.3 Selecting the study area

`admin_23883` contains 83518 features, each representing a village. However, for our study, we only require the data for villages in the Papua region, which consists of 6 provinces (as of 2023): Papua Selatan (South Papua), Papua Tengah (Central Papua), Papua Pegunungan (Mountains Papua), Papua Barat Daya (South-West Papua), Papua Barat (West Papua), and Papua.

The WADMPR field of `admin` contains the name of the province that each village belongs to.

All the provinces in the Papua region have the word "Papua" in their names. In the following code chunk, we extract the rows of `admin` that contain the word "Papua" in the WADMPR field and save them as a new object `papua`.

*grepl()* of base R is used to obtain a logical vector indicating whether each element of `admin$WADMPR` contains a match to the word "Papua". Then, *filter()* of **dplyr** (part of the **tidyverse**) is used to retain only the corresponding rows of `admin`.

```{r}
papua <- filter(admin, grepl("Papua", admin$WADMPR, fixed = TRUE))  

papua
```

As required, `papua` is a sf polygon data.frame. It has 7374 features.

We check whether geometries of all the features in `papua` are valid.

```{r}
length(which(st_is_valid(papua) == TRUE))
```

As we can see, the geometries of 7371 features are valid. This means that `papua` contains 3 features with invalid geometries. Using *st_make_valid()* of **sf**, we make the invalid geometries valid. Next, we use *mutate()* of **dplyr** to replace the existing geometry column with a new one containing the valid geometries. We save the result as a new sf polygon data.frame, `papua_cleaned`.

```{r}
papua_cleaned <- papua %>%
  mutate(geometry = st_make_valid(geometry))
```

We verify that all 7374 geometries in `papua_cleaned` are valid.

```{r}
length(which(st_is_valid(papua_cleaned) == TRUE))
```

#### 3.1.4 Obtaining admin1 boundaries

Next, we use *group_by()* of **dplyr** to group the different villages according to the province they belong in. Then, we use *summarise()* of **dplyr** and *st_union()* of **sf** to combine the geometries of the different villages within each province and dissolve the boundaries between villages, thus obtaining the admin1 (province) level boundaries.

```{r}
papua_adm1 <- papua_cleaned %>%
  group_by(WADMPR) %>%
  summarise(geometry = st_union(geometry))

papua_adm1
```

We visualise `papua_adm1` using *plot()*.

```{r}
plot(papua_adm1)
```

We can now save the `papua_adm1` study area layer using the *write_rds()* function of **readr**, part of the **tidyverse**.

```{r}
#| eval: FALSE

write_rds(papua_adm1, "data/rds/papua_adm1.rds")
```

```{r}
#| echo: FALSE

admin1_study <- read_rds("data/rds/papua_adm1.rds")
```

### 3.2 Preparing the admin2 layer

#### 3.2.1 Obtaining admin2 boundaries

The WADMKK field of `papua_cleaned` contains the name of each city/regency that each village belongs to.

Similar to earlier, we first use *group_by()* of **dplyr** to group the different villages according to the province as well as city/regency they belong in. Then, we use *summarise()* of **dplyr** and *st_union()* of **sf** to combine the geometries of the different villages within each city/regency and dissolve the boundaries between villages, thus obtaining the admin2 (city/regency) level boundaries.

```{r}
papua_adm2 <- papua_cleaned %>%
  group_by(WADMPR, WADMKK) %>%
  summarise(geometry = st_union(geometry))

papua_adm2
```

We visualise the admin2 boundaries in `papua_adm2` using *plot()*.

```{r}
plot(papua_adm2["WADMKK"])
```

We can now save the `papua_adm2` study area layer using *write_rds().*

```{r}
#| eval: FALSE

write_rds(papua_adm2, "data/rds/papua_adm2.rds")
```

```{r}
#| echo: FALSE

papua_adm2 <- read_rds("data/rds/papua_adm2.rds")
```

### 3.3 Preparing the armed conflict point events layer

#### 3.3.1 Importing the data

Lastly, we import `2015-01-01-2024-06-30-Indonesia.csv`. This dataset provides location, date, and other attribute information on 6 types of armed conflict events in Indonesia occurring from 1 January 2015 to 30 June 2024. Since it is in csv format, we use the *read_csv()* function of **readr**, part of the **tidyverse**, to import it, and save it as an object named `points`.

```{r}

points <- read_csv("data/2015-01-01-2024-06-30-Indonesia.csv")

glimpse(points)
```

The longitude and latitude fields capture the x- and y-coordinates of the data points respectively. They appear to be in the WGS 84 geographic coordinate system (in which latitudes range from -90 to 90 and longitudes range from 0 to 360).

We then convert `points` to an sf object.

```{r}
points_sf <- st_as_sf(points, coords = c("longitude","latitude"), crs = 4326)

st_geometry(points_sf)
```

#### 3.3.2 Importing the data

We reproject `points_sf` in the DGN95 / UTM zone 53S coordinate system, and save the reprojected data as a new object `points_23883`.

```{r}
points_23883 <- st_transform(points_sf, crs = 23883)

st_geometry(points_23883)
```

#### 3.3.3 Selecting points in the study area

`points_23883` provides information on armed conflict events throughout Indonesia, and the admin1 field contains the name of the province where each point event took place.

As mentioned earlier, our study area is the region of Papua, consisting of 6 provinces. 4 of these, namely Papua Selatan (South Papua), Papua Tengah (Central Papua), Papua Pegunungan (Mountains Papua), Papua Barat Daya (South-West Papua), were only created in [2022](https://unstats.un.org/unsd/ungegn/sessions/3rd_session_2023/documents/GEGN.2_2023_50_CRP50.pdf), when they were carved out of the original 2 provinces of Papua and Papua Barat.

We use the *group_by()* and *summarize()* functions of **dplyr** to find all the provinces that are named in `points_23883`, and save them as a data.frame `provinces` .

```{r}
provinces <- points_23883 %>% 
  group_by(admin1) %>%
  summarize()
```

Since `points_23883` contains data from 1 January 2015 to 30 June 2024, the admin1 field of each point event may reflect the original (pre-2022) or the new (post-2022) province names. As we can see in `provinces`, the 6 current provinces are all named in English (Central Papua, Highland Papua, Papua, South Papua, Southwest Papua and West Papua).

(Note: In our later analysis, we need to be mindful that 2 of the current provinces have the same names as the original 2 provinces ("Papua" and "West Papua"). This means that when the admin1 field contains either of these values, we cannot be sure whether they are referring to the original or current provinces bearing these names. Hence, we should not use the values in the admin1 field to aggregate our data.)

We create a vector containing these province names.

```{r}
provincenames <- c("Central Papua", "Highland Papua", "Papua", "South Papua", "Southwest Papua", "West Papua")
```

Next, we use *filter()* to extract only the armed conflict events that take place in these provinces from `points_23883`. In addition, we use *select()*, also part of **dplyr**, to retain only the fields containing the event date, event type, involved parties (actor 1 and actor 2), the province (admin 1) and regency/city (admin2) where the event occurred, the number of fatalities, notes about the event, and the point geometry, for each event.

```{r}
points_study <- points_23883 %>%
  filter(admin1 %in% provincenames) %>%
  select(event_date, event_type, actor1, actor2, admin1, admin2, fatalities, notes, geometry)

points_study
```

There are 2942 features in the `points_study` sf point data.frame, corresponding to 2942 armed conflict point events.

We verify that the geometries of all the point events are valid.

```{r}
length(which(st_is_valid(points_study) == TRUE))
```

We can now save the `points_study` study area layer using *write_rds().*

```{r}
#| eval: FALSE

write_rds(points_study, "data/rds/points_study.rds")
```

```{r}
#| echo: FALSE

points_study <- read_rds("data/rds/points_study.rds")
```

## 4.0 Interactive Point Map

```{r}
tmap_mode("plot")

tm_shape(admin1_study) + 
  tm_polygons() +
    tm_shape(points_study) + 
      tm_dots()
```

## 5.0 Time Series Graph

## 6.0 Shiny UI

### 6.1 Shiny UI for Interactive Point Map

### 6.2 Shiny UI for Time Series Graph
